/*
MIT License

Copyright (c) 2021 Prysmatic Labs

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

This code is based on Intel's implementation found in
	https://github.com/intel/intel-ipsec-mb
Copied parts are
	Copyright (c) 2012-2021, Intel Corporation
*/

#include "textflag.h"

// AVX x1 definitions

#define OUTPUT_PTR	DI
#define DATA_PTR	SI
#define NUM_BLKS	DX
#define TBL		CX

#define RAL AX
#define RBL BX
#define RCL BP
#define RDL R8
#define REL R9
#define RFL R10
#define RGL R11
#define RHL R12

#define XTMP0 X4
#define XTMP1 X5
#define XTMP2 X6
#define XTMP3 X7
#define XTMP4 X8
#define XTMP5 X11
#define XFER X9

#define y0 R13
#define y1 R14
#define y2 R15

#define _SHUF_00BA X10
#define _SHUF_DC00 X12
#define _BYTE_FLIP_MASK X13

#define COPY_XMM_AND_BSWAP(dst,src,msk) \
	VMOVDQU		src, dst; \
	VPSHUFB		msk, dst, dst

#define FOUR_ROUNDS_AND_SCHEDA(a, b, c, d, e, f, g, h, X0_, X1_, X2_, X3_) \
	RORXL	$(25-11), e, y0; \
		VPALIGNR	$4, X2_, X3_, XTMP0; \
	RORXL	$(22-13), a, y1; \
	XORL	e, y0; \
	MOVL	f, y2; \
	RORXL	$(11-6), y0, y0; \
	XORL	a, y1; \
	XORL	g, y2; \
		VPADDD	X0_, XTMP0, XTMP0; \
	XORL	e, y0; \
	ANDL	e, y2; \
	RORXL	$(13-2), y1, y1; \ 
		VPALIGNR	$4, X0_, X1_, XTMP1; \
	XORL	a, y1; \
	RORXL	$6, y0, y0; \ 
	XORL	g, y2; \
	RORXL	$2, y1, y1; \
	ADDL	y0, y2; \
	ADDL	(0*4)(SP), y2; \
	MOVL	a, y0; \
	ADDL	y2, h; \
	MOVL	a, y2; \
		VPSRLD	$7, XTMP1, XTMP2; \
	ORL	c, y0; \
	ADDL	h, d; \
	ANDL	c, y2; \
		VPSLLD	$(32-7), XTMP1, XTMP3; \
	ANDL	b, y0; \
	ADDL	y1, h; \
		VPOR	XTMP2, XTMP3, XTMP3; \
	ORL	y2, y0; \
	ADDL	y0, h

#define FOUR_ROUNDS_AND_SCHEDB(a, b, c, d, e, f, g, h, X0_, X1_, X2_, X3_) \
	RORXL	$(25-11), e, y0; \
	RORXL	$(22-13), a, y1; \
	XORL	e, y0; \
		VPSRLD	$18, XTMP1, XTMP2; \
	MOVL	f, y2; \
	RORXL	$(11-6), y0, y0; \
	XORL	a, y1; \
	XORL	g, y2; \
		VPSRLD	$3, XTMP1, XTMP4; \
	XORL	e, y0; \
	ANDL	e, y2; \
	RORXL	$(13-2), y1, y1; \
	XORL	a, y1; \
	RORXL	$6, y0, y0; \
		VPSLLD	$(32-18), XTMP1, XTMP1; \
	XORL	g, y2; \
	RORXL	$2, y1, y1; \
		VPXOR	XTMP1, XTMP3, XTMP3; \
	ADDL	y0, y2; \
	ADDL	(1*4)(SP), y2; \
	MOVL	a, y0; \
		VPXOR	XTMP2, XTMP3, XTMP3; \
	ADDL	y2, h; \
	MOVL	a, y2; \
	ORL	c, y0; \
		VPXOR	XTMP4, XTMP3, XTMP1; \
	ADDL	h, d; \
	ANDL	c, y2; \
		VPSHUFD $0xFA, X3_, XTMP2; \
	ANDL	b, y0; \
	ADDL	y1, h; \
		VPADDD	XTMP1, XTMP0, XTMP0; \
	ORL	y2, y0; \
	ADDL	y0, h


#define FOUR_ROUNDS_AND_SCHEDC(a, b, c, d, e, f, g, h, X0_, X1_, X2_, X3_) \
	RORXL	$(25-11), e, y0; \
	RORXL	$(22-13), a, y1; \
	XORL	e, y0; \
		VPSRLD	$10, XTMP2, XTMP4; \
	MOVL	f, y2; \
	RORXL	$(11-6), y0, y0; \
	XORL	a, y1; \
		VPSRLQ	$19, XTMP2, XTMP3; \
	XORL	g, y2; \
	XORL	e, y0; \
	ANDL	e, y2; \
		VPSRLQ	$17, XTMP2, XTMP2; \
	RORXL	$(13-2), y1, y1; \
	XORL	a, y1; \
	RORXL	$6, y0, y0; \
		VPXOR	XTMP3, XTMP2, XTMP2; \
	XORL	g, y2; \
	RORXL	$2, y1, y1; \
	ADDL	y0, y2; \
		VPXOR	XTMP2, XTMP4, XTMP4; \
	ADDL	(2*4)(SP), y2; \
	MOVL	a, y0; \
	ADDL	y2, h; \
		VPSHUFB	 _SHUF_00BA, XTMP4, XTMP4; \
	MOVL	a, y2; \
	ORL	c, y0; \
	ADDL	h, d; \
		VPADDD	XTMP4, XTMP0, XTMP0; \
	ANDL	c, y2; \
	ANDL	b, y0; \
		VPSHUFD $0x50, XTMP0, XTMP2; \
	ADDL	y1, h; \
	ORL	y2, y0; \
	ADDL	y0, h

#define FOUR_ROUNDS_AND_SCHEDD(a, b, c, d, e, f, g, h, X0_, X1_, X2_, X3_) \
	RORXL	$(25-11), e, y0; \
	RORXL	$(22-13), a, y1; \
		VPSRLD	$10, XTMP2, XTMP5; \
	XORL	e, y0; \
	MOVL	f, y2; \
	RORXL	$(11-6), y0, y0; \
		VPSRLQ  $19, XTMP2, XTMP3; \
	XORL	a, y1; \
	XORL	g, y2; \
	XORL	e, y0; \
		VPSRLQ $17, XTMP2, XTMP2; \
	ANDL	e, y2; \
	RORXL	$(13-2), y1, y1; \
	XORL	a, y1; \
		VPXOR	XTMP3, XTMP2, XTMP2; \
	RORXL	$6, y0, y0; \
	XORL	g, y2; \
	RORXL	$2, y1, y1; \
		VPXOR	XTMP2, XTMP5, XTMP5; \
	ADDL	y0, y2; \
	ADDL	(3*4)(SP), y2; \
	MOVL	a, y0; \
	ADDL	y2, h; \
	MOVL	a, y2; \
		VPSHUFB	 _SHUF_DC00, XTMP5, XTMP5; \
	ORL	c, y0; \
	ADDL	h, d; \
	ANDL	c, y2; \
		VPADDD	XTMP0, XTMP5, X0_; \
	ANDL	b, y0; \
	ADDL	y1, h; \
	ORL	y2, y0; \
	ADDL	y0, h

#define FOUR_ROUNDS_AND_SCHED(a, b, c, d, e, f, g, h, X0_, X1_, X2_, X3_) \
	FOUR_ROUNDS_AND_SCHEDA(a, b, c, d, e, f, g, h, X0_, X1_, X2_, X3_); \
	FOUR_ROUNDS_AND_SCHEDB(h, a, b, c, d, e, f, g, X0_, X1_, X2_, X3_); \
	FOUR_ROUNDS_AND_SCHEDC(g, h, a, b, c, d, e, f, X0_, X1_, X2_, X3_); \
	FOUR_ROUNDS_AND_SCHEDD(f, g, h, a, b, c, d, e, X0_, X1_, X2_, X3_)

#define DO_ROUND(base, offset, a, b, c, d, e, f, g, h) \
	RORXL	$(25-11), e, y0; \
	RORXL	$(22-13), a, y1; \
	XORL	e, y0; \
	MOVL	f, y2; \
	RORXL	$(11-6), y0, y0; \
	XORL	a, y1; \
	XORL	g, y2; \
	XORL	e, y0; \
	ANDL	e, y2; \
	RORXL	$(13-2), y1, y1; \
	XORL	a, y1; \
	RORXL	$6, y0, y0; \
	XORL	g, y2; \
	RORXL	$2, y1, y1; \
	ADDL	y0, y2; \
	ADDL	(offset)(base), y2; \
	MOVL	a, y0; \
	ADDL	y2, h; \
	MOVL	a, y2; \
	ORL	c, y0; \
	ADDL	h, d; \
	ANDL	c, y2; \
	ANDL	b, y0; \
	ADDL	y1, h; \
	ORL	y2, y0; \
	ADDL	y0, h


// AVX2 x8 definitions

#define a0 Y12
#define a1 Y13
#define a2 Y14
#define TMP Y15
#define TMP0 Y6
#define TMP1 Y7
#define TT0 Y8
#define TT1 Y9
#define TT2 Y10
#define TT3 Y11
#define TT4 Y12
#define TT5 Y13
#define TT6 Y14
#define TT7 Y15

#define _DIGEST	512
#define _YTMP	768

#define YTMP0	_YTMP + 0*32
#define YTMP1	_YTMP + 1*32
#define YTMP2	_YTMP + 2*32
#define YTMP3	_YTMP + 3*32

#define TRANSPOSE8_U32_LOAD8(offset) \
	VMOVUPS	(offset + 0*64)(DATA_PTR), TT0; \
	VMOVUPS	(offset + 1*64)(DATA_PTR), TT1; \
	VMOVUPS	(offset + 2*64)(DATA_PTR), TT2; \
	VMOVUPS	(offset + 3*64)(DATA_PTR), TT3; \
	VMOVUPS	(offset + 0*64+16)(DATA_PTR), TT4; \
	VMOVUPS	(offset + 1*64+16)(DATA_PTR), TT5; \
	VMOVUPS	(offset + 2*64+16)(DATA_PTR), TT6; \
	VMOVUPS	(offset + 3*64+16)(DATA_PTR), TT7; \
	VINSERTI128 $0x01, (offset + 4*64)(DATA_PTR), TT0, TT0; \
	VINSERTI128 $0x01, (offset + 5*64)(DATA_PTR), TT1, TT1; \
	VINSERTI128 $0x01, (offset + 6*64)(DATA_PTR), TT2, TT2; \
	VINSERTI128 $0x01, (offset + 7*64)(DATA_PTR), TT3, TT3; \
	VINSERTI128 $0x01, (offset + 4*64+16)(DATA_PTR), TT4, TT4; \
	VINSERTI128 $0x01, (offset + 5*64+16)(DATA_PTR), TT5, TT5; \
	VINSERTI128 $0x01, (offset + 6*64+16)(DATA_PTR), TT6, TT6; \
	VINSERTI128 $0x01, (offset + 7*64+16)(DATA_PTR), TT7, TT7

#define TRANSPOSE8_U32_PRELOADED \
	VSHUFPS $0x44, TT1, TT0, TMP0; \
	VSHUFPS $0xEE, TT1, TT0, TT0; \
	VSHUFPS $0x44, TT3, TT2, TMP1; \
	VSHUFPS $0xEE, TT3, TT2, TT2; \
	VSHUFPS $0xDD, TMP1, TMP0, TT1; \
	VSHUFPS $0xDD, TT2, TT0, TT3; \
	VSHUFPS $0x88, TT2, TT0, TT2; \
	VSHUFPS $0x88, TMP1, TMP0, TT0; \
	VSHUFPS $0x44, TT5, TT4, TMP0; \
	VSHUFPS $0xEE, TT5, TT4, TT4; \
	VSHUFPS $0x44, TT7, TT6, TMP1; \
	VSHUFPS $0xEE, TT7, TT6, TT6; \
	VSHUFPS $0xDD, TMP1, TMP0, TT5; \
	VSHUFPS $0xDD, TT6, TT4, TT7; \
	VSHUFPS $0x88, TT6, TT4, TT6; \
	VSHUFPS $0x88, TMP1, TMP0, TT4

#define TRANSPOSE8_U32 \
       VSHUFPS $0x44, Y1, Y0, TT0; \
       VSHUFPS $0xEE, Y1, Y0, Y0; \
       VSHUFPS $0x44, Y3, Y2, TT1; \
       VSHUFPS $0xEE, Y3, Y2, Y2; \
       VSHUFPS $0xDD, TT1, TT0, Y3; \
       VSHUFPS $0x88, Y2, Y0, Y1; \
       VSHUFPS $0xDD, Y2, Y0, Y0; \
       VSHUFPS $0x88, TT1, TT0, TT0; \
       VSHUFPS $0x44, Y5, Y4, Y2; \
       VSHUFPS $0xEE, Y5, Y4, Y4; \
       VSHUFPS $0x44, Y7, Y6, TT1; \
       VSHUFPS $0xEE, Y7, Y6, Y6; \
       VSHUFPS $0xDD, TT1, Y2, Y7; \
       VSHUFPS $0x88, Y6, Y4, Y5; \
       VSHUFPS $0xDD, Y6, Y4, Y4; \
       VSHUFPS $0x88, TT1, Y2, TT1; \
       VPERM2F128 $0x13, Y1, Y5, Y6; \
       VPERM2F128 $0x02, Y1, Y5, Y2; \
       VPERM2F128 $0x13, Y3, Y7, Y5; \
       VPERM2F128 $0x02, Y3, Y7, Y1; \
       VPERM2F128 $0x13, Y0, Y4, Y7; \
       VPERM2F128 $0x02, Y0, Y4, Y3; \
       VPERM2F128 $0x13, TT0, TT1, Y4; \
       VPERM2F128 $0x02, TT0, TT1, Y0

#define PRORD(src, imm) \
	VPSLLD	$(32 - imm), src, TMP; \
	VPSRLD  $imm, src, src; \
	VPOR	TMP, src, src

#define PRORD_nd(dst, src, amt) \
	VPSLLD $(32 - amt), src, TMP; \
	VPSRLD $amt, src, dst; \
	VPOR   TMP, dst, dst

#define ROUND_00_15_PADD(a, b, c, d, e, f, g, h, T1, i) \
	PRORD_nd(a0, e, 5); \
	VPXOR	g, f, a2; \
	VPAND	e, a2, a2; \
	VPXOR	g, a2, a2; \
	PRORD_nd(a1, e, 25); \
	VMOVDQU	(32*i)(TBL), T1; \
	VPXOR	e, a0, a0; \
	PRORD(a0, 6); \
	VPADDD	a2, h, h; \
	PRORD_nd(a2, a, 11); \
	VPADDD	T1, h, h; \
	VPXOR	a1, a0, a0; \
	PRORD_nd(a1, a, 22); \
	VPXOR	c, a, T1; \
	VPAND	b, T1, T1; \
	VPADDD	a0, h, h; \
	VPADDD	h, d, d; \
	VPXOR	a, a2, a2; \
	PRORD(a2, 2); \
	VPXOR	a1, a2, a2; \
	VPAND	c, a, a1; \
	VPOR	T1, a1, a1; \
	VPADDD	a1, h, h; \
	VPADDD	a2, h, h


#define ROUND_00_15(a, b, c, d, e, f, g, h, T1, i) \
	PRORD_nd(a0, e, 5); \
	VPXOR	g, f, a2; \
	VPAND	e, a2, a2; \
	VPXOR	g, a2, a2; \
	PRORD_nd(a1, e, 25); \
	VMOVDQU	T1, (32*(i&0xf))(SP); \
	VPADDD	(32*i)(TBL), T1, T1; \
	VPXOR	e, a0, a0; \
	PRORD(a0, 6); \
	VPADDD	a2, h, h; \
	PRORD_nd(a2, a, 11); \
	VPADDD	T1, h, h; \
	VPXOR	a1, a0, a0; \
	PRORD_nd(a1, a, 22); \
	VPXOR	c, a, T1; \
	VPAND	b, T1, T1; \
	VPADDD	a0, h, h; \
	VPADDD	h, d, d; \
	VPXOR	a, a2, a2; \
	PRORD(a2, 2); \
	VPXOR	a1, a2, a2; \
	VPAND	c, a, a1; \
	VPOR	T1, a1, a1; \
	VPADDD	a1, h, h; \
	VPADDD	a2, h, h

#define ROUND_16_XX(a, b, c, d, e, f, g, h, T1, i) \
	VMOVDQU	(32*((i-15)&0x0f))(SP), T1; \
	VMOVDQU	(32*((i-2)&0x0f))(SP), a1; \
	VMOVDQA	T1, a0; \
	PRORD(T1, 11); \
	VMOVDQA	a1, a2; \
	PRORD(a1, 2); \
	VPXOR	a0, T1, T1; \
	PRORD(T1, 7); \
	VPXOR	a2, a1, a1; \
	PRORD(a1, 17); \
	VPSRLD	$3, a0, a0; \
	VPXOR	a0, T1, T1; \
	VPSRLD	$10, a2, a2; \
	VPXOR	a2, a1, a1; \
	VPADDD	(32*((i-16)&0x0f))(SP), T1, T1; \
	VPADDD	(32*((i-7)&0x0f))(SP), a1, a1; \
	VPADDD	a1, T1, T1; \
	ROUND_00_15(a, b, c, d, e, f, g, h, T1, i)

TEXT ·Hash(SB), 0, $928-36
	CMPB ·hasAVX2(SB), $0
	JE   avx1

	MOVL count+32(FP), NUM_BLKS  // NUMBLKS uint32
	MOVQ digests+0(FP), OUTPUT_PTR // digests *[][32]byte
	MOVQ p_base+8(FP), DATA_PTR  // p [][32]byte

sha256_8_avx2_loop:
	CMPL NUM_BLKS, $8
	JB   avx1

	MOVQ	$_DIGEST_8<>(SB), TBL
	VMOVDQU (0*32)(TBL), Y0
	VMOVDQU (1*32)(TBL), Y1
	VMOVDQU (2*32)(TBL), Y2
	VMOVDQU (3*32)(TBL), Y3
	VMOVDQU (4*32)(TBL), Y4
	VMOVDQU (5*32)(TBL), Y5
	VMOVDQU (6*32)(TBL), Y6
	VMOVDQU (7*32)(TBL), Y7

	MOVQ	$_K256_8<>(SB), TBL

	// First 16 rounds
	TRANSPOSE8_U32_LOAD8(0)
	VMOVDQU	Y6, (YTMP0)(SP)
	VMOVDQU	Y7, (YTMP1)(SP)
	TRANSPOSE8_U32_PRELOADED
	VMOVDQU	_PSHUFFLE_BYTE_FLIP_MASK_8<>(SB), TMP1
	VMOVDQU	(YTMP0)(SP), Y6
	VPSHUFB	TMP1, TT0, TT0
	VPSHUFB	TMP1, TT1, TT1
	VPSHUFB	TMP1, TT2, TT2
	VPSHUFB	TMP1, TT3, TT3
	VPSHUFB	TMP1, TT4, TT4
	VPSHUFB	TMP1, TT5, TT5
	VPSHUFB	TMP1, TT6, TT6
	VPSHUFB	TMP1, TT7, TT7
	VMOVDQU	(YTMP1)(SP), Y7
	VMOVDQU	TT4, (YTMP0)(SP)
	VMOVDQU	TT5, (YTMP1)(SP)
	VMOVDQU	TT6, (YTMP2)(SP)
	VMOVDQU	TT7, (YTMP3)(SP)

	ROUND_00_15(Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, TT0, 0)
	VMOVDQU	(YTMP0)(SP), TT0
	ROUND_00_15(Y7, Y0, Y1, Y2, Y3, Y4, Y5, Y6, TT1, 1)
	VMOVDQU	(YTMP1)(SP), TT1
	ROUND_00_15(Y6, Y7, Y0, Y1, Y2, Y3, Y4, Y5, TT2, 2)
	VMOVDQU	(YTMP2)(SP), TT2
	ROUND_00_15(Y5, Y6, Y7, Y0, Y1, Y2, Y3, Y4, TT3, 3)
	VMOVDQU	(YTMP3)(SP), TT3
	ROUND_00_15(Y4, Y5, Y6, Y7, Y0, Y1, Y2, Y3, TT0, 4)
	ROUND_00_15(Y3, Y4, Y5, Y6, Y7, Y0, Y1, Y2, TT1, 5)
	ROUND_00_15(Y2, Y3, Y4, Y5, Y6, Y7, Y0, Y1, TT2, 6)
	ROUND_00_15(Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y0, TT3, 7)

	TRANSPOSE8_U32_LOAD8(32)
	VMOVDQU	Y6, (YTMP0)(SP)
	VMOVDQU	Y7, (YTMP1)(SP)
	TRANSPOSE8_U32_PRELOADED
	VMOVDQU	_PSHUFFLE_BYTE_FLIP_MASK_8<>(SB), TMP1
	VMOVDQU	(YTMP0)(SP), Y6
	VPSHUFB	TMP1, TT0, TT0
	VPSHUFB	TMP1, TT1, TT1
	VPSHUFB	TMP1, TT2, TT2
	VPSHUFB	TMP1, TT3, TT3
	VPSHUFB	TMP1, TT4, TT4
	VPSHUFB	TMP1, TT5, TT5
	VPSHUFB	TMP1, TT6, TT6
	VPSHUFB	TMP1, TT7, TT7
	VMOVDQU	(YTMP1)(SP), Y7
	VMOVDQU	TT4, (YTMP0)(SP)
	VMOVDQU	TT5, (YTMP1)(SP)
	VMOVDQU	TT6, (YTMP2)(SP)
	VMOVDQU	TT7, (YTMP3)(SP)
	ROUND_00_15(Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, TT0, 8)
	VMOVDQU	(YTMP0)(SP), TT0
	ROUND_00_15(Y7, Y0, Y1, Y2, Y3, Y4, Y5, Y6, TT1, 9)
	VMOVDQU	(YTMP1)(SP), TT1
	ROUND_00_15(Y6, Y7, Y0, Y1, Y2, Y3, Y4, Y5, TT2, 10)
	VMOVDQU	(YTMP2)(SP), TT2
	ROUND_00_15(Y5, Y6, Y7, Y0, Y1, Y2, Y3, Y4, TT3, 11)
	VMOVDQU	(YTMP3)(SP), TT3
	ROUND_00_15(Y4, Y5, Y6, Y7, Y0, Y1, Y2, Y3, TT0, 12)
	ROUND_00_15(Y3, Y4, Y5, Y6, Y7, Y0, Y1, Y2, TT1, 13)
	ROUND_00_15(Y2, Y3, Y4, Y5, Y6, Y7, Y0, Y1, TT2, 14)
	ROUND_00_15(Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y0, TT3, 15)

	// Rounds 16-31
	ROUND_16_XX(Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, TT0, 0x10)
	ROUND_16_XX(Y7, Y0, Y1, Y2, Y3, Y4, Y5, Y6, TT0, 0x11)
	ROUND_16_XX(Y6, Y7, Y0, Y1, Y2, Y3, Y4, Y5, TT0, 0x12)
	ROUND_16_XX(Y5, Y6, Y7, Y0, Y1, Y2, Y3, Y4, TT0, 0x13)
	ROUND_16_XX(Y4, Y5, Y6, Y7, Y0, Y1, Y2, Y3, TT0, 0x14)
	ROUND_16_XX(Y3, Y4, Y5, Y6, Y7, Y0, Y1, Y2, TT0, 0x15)
	ROUND_16_XX(Y2, Y3, Y4, Y5, Y6, Y7, Y0, Y1, TT0, 0x16)
	ROUND_16_XX(Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y0, TT0, 0x17)
	ROUND_16_XX(Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, TT0, 0x18)
	ROUND_16_XX(Y7, Y0, Y1, Y2, Y3, Y4, Y5, Y6, TT0, 0x19)
	ROUND_16_XX(Y6, Y7, Y0, Y1, Y2, Y3, Y4, Y5, TT0, 0x1a)
	ROUND_16_XX(Y5, Y6, Y7, Y0, Y1, Y2, Y3, Y4, TT0, 0x1b)
	ROUND_16_XX(Y4, Y5, Y6, Y7, Y0, Y1, Y2, Y3, TT0, 0x1c)
	ROUND_16_XX(Y3, Y4, Y5, Y6, Y7, Y0, Y1, Y2, TT0, 0x1d)
	ROUND_16_XX(Y2, Y3, Y4, Y5, Y6, Y7, Y0, Y1, TT0, 0x1e)
	ROUND_16_XX(Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y0, TT0, 0x1f)

	// Rounds 32--47
	ROUND_16_XX(Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, TT0, 0x20)
	ROUND_16_XX(Y7, Y0, Y1, Y2, Y3, Y4, Y5, Y6, TT0, 0x21)
	ROUND_16_XX(Y6, Y7, Y0, Y1, Y2, Y3, Y4, Y5, TT0, 0x22)
	ROUND_16_XX(Y5, Y6, Y7, Y0, Y1, Y2, Y3, Y4, TT0, 0x23)
	ROUND_16_XX(Y4, Y5, Y6, Y7, Y0, Y1, Y2, Y3, TT0, 0x24)
	ROUND_16_XX(Y3, Y4, Y5, Y6, Y7, Y0, Y1, Y2, TT0, 0x25)
	ROUND_16_XX(Y2, Y3, Y4, Y5, Y6, Y7, Y0, Y1, TT0, 0x26)
	ROUND_16_XX(Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y0, TT0, 0x27)
	ROUND_16_XX(Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, TT0, 0x28)
	ROUND_16_XX(Y7, Y0, Y1, Y2, Y3, Y4, Y5, Y6, TT0, 0x29)
	ROUND_16_XX(Y6, Y7, Y0, Y1, Y2, Y3, Y4, Y5, TT0, 0x2a)
	ROUND_16_XX(Y5, Y6, Y7, Y0, Y1, Y2, Y3, Y4, TT0, 0x2b)
	ROUND_16_XX(Y4, Y5, Y6, Y7, Y0, Y1, Y2, Y3, TT0, 0x2c)
	ROUND_16_XX(Y3, Y4, Y5, Y6, Y7, Y0, Y1, Y2, TT0, 0x2d)
	ROUND_16_XX(Y2, Y3, Y4, Y5, Y6, Y7, Y0, Y1, TT0, 0x2e)
	ROUND_16_XX(Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y0, TT0, 0x2f)

	// Rounds 48--64
	ROUND_16_XX(Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, TT0, 0x30)
	ROUND_16_XX(Y7, Y0, Y1, Y2, Y3, Y4, Y5, Y6, TT0, 0x31)
	ROUND_16_XX(Y6, Y7, Y0, Y1, Y2, Y3, Y4, Y5, TT0, 0x32)
	ROUND_16_XX(Y5, Y6, Y7, Y0, Y1, Y2, Y3, Y4, TT0, 0x33)
	ROUND_16_XX(Y4, Y5, Y6, Y7, Y0, Y1, Y2, Y3, TT0, 0x34)
	ROUND_16_XX(Y3, Y4, Y5, Y6, Y7, Y0, Y1, Y2, TT0, 0x35)
	ROUND_16_XX(Y2, Y3, Y4, Y5, Y6, Y7, Y0, Y1, TT0, 0x36)
	ROUND_16_XX(Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y0, TT0, 0x37)
	ROUND_16_XX(Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, TT0, 0x38)
	ROUND_16_XX(Y7, Y0, Y1, Y2, Y3, Y4, Y5, Y6, TT0, 0x39)
	ROUND_16_XX(Y6, Y7, Y0, Y1, Y2, Y3, Y4, Y5, TT0, 0x3a)
	ROUND_16_XX(Y5, Y6, Y7, Y0, Y1, Y2, Y3, Y4, TT0, 0x3b)
	ROUND_16_XX(Y4, Y5, Y6, Y7, Y0, Y1, Y2, Y3, TT0, 0x3c)
	ROUND_16_XX(Y3, Y4, Y5, Y6, Y7, Y0, Y1, Y2, TT0, 0x3d)
	ROUND_16_XX(Y2, Y3, Y4, Y5, Y6, Y7, Y0, Y1, TT0, 0x3e)
	ROUND_16_XX(Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y0, TT0, 0x3f)

	// add old digest
	MOVQ	$_DIGEST_8<>(SB), TBL
	VPADDD  (0*32)(TBL), Y0, Y0
	VPADDD  (1*32)(TBL), Y1, Y1
	VPADDD  (2*32)(TBL), Y2, Y2
	VPADDD  (3*32)(TBL), Y3, Y3
	VPADDD  (4*32)(TBL), Y4, Y4
	VPADDD  (5*32)(TBL), Y5, Y5
	VPADDD  (6*32)(TBL), Y6, Y6
	VPADDD  (7*32)(TBL), Y7, Y7

	// rounds with padding
	// save old digest
	VMOVDQU Y0, (_DIGEST + 0*32)(SP)
	VMOVDQU Y1, (_DIGEST + 1*32)(SP)
	VMOVDQU Y2, (_DIGEST + 2*32)(SP)
	VMOVDQU Y3, (_DIGEST + 3*32)(SP)
	VMOVDQU Y4, (_DIGEST + 4*32)(SP)
	VMOVDQU Y5, (_DIGEST + 5*32)(SP)
	VMOVDQU Y6, (_DIGEST + 6*32)(SP)
	VMOVDQU Y7, (_DIGEST + 7*32)(SP)

	MOVQ	$_PADDING_8<>(SB), TBL

	ROUND_00_15_PADD(Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, TT0, 0x00)
	ROUND_00_15_PADD(Y7, Y0, Y1, Y2, Y3, Y4, Y5, Y6, TT0, 0x01)
	ROUND_00_15_PADD(Y6, Y7, Y0, Y1, Y2, Y3, Y4, Y5, TT0, 0x02)
	ROUND_00_15_PADD(Y5, Y6, Y7, Y0, Y1, Y2, Y3, Y4, TT0, 0x03)
	ROUND_00_15_PADD(Y4, Y5, Y6, Y7, Y0, Y1, Y2, Y3, TT0, 0x04)
	ROUND_00_15_PADD(Y3, Y4, Y5, Y6, Y7, Y0, Y1, Y2, TT0, 0x05)
	ROUND_00_15_PADD(Y2, Y3, Y4, Y5, Y6, Y7, Y0, Y1, TT0, 0x06)
	ROUND_00_15_PADD(Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y0, TT0, 0x07)
	ROUND_00_15_PADD(Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, TT0, 0x08)
	ROUND_00_15_PADD(Y7, Y0, Y1, Y2, Y3, Y4, Y5, Y6, TT0, 0x09)
	ROUND_00_15_PADD(Y6, Y7, Y0, Y1, Y2, Y3, Y4, Y5, TT0, 0x0a)
	ROUND_00_15_PADD(Y5, Y6, Y7, Y0, Y1, Y2, Y3, Y4, TT0, 0x0b)
	ROUND_00_15_PADD(Y4, Y5, Y6, Y7, Y0, Y1, Y2, Y3, TT0, 0x0c)
	ROUND_00_15_PADD(Y3, Y4, Y5, Y6, Y7, Y0, Y1, Y2, TT0, 0x0d)
	ROUND_00_15_PADD(Y2, Y3, Y4, Y5, Y6, Y7, Y0, Y1, TT0, 0x0e)
	ROUND_00_15_PADD(Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y0, TT0, 0x0f)

	ROUND_00_15_PADD(Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, TT0, 0x10)
	ROUND_00_15_PADD(Y7, Y0, Y1, Y2, Y3, Y4, Y5, Y6, TT0, 0x11)
	ROUND_00_15_PADD(Y6, Y7, Y0, Y1, Y2, Y3, Y4, Y5, TT0, 0x12)
	ROUND_00_15_PADD(Y5, Y6, Y7, Y0, Y1, Y2, Y3, Y4, TT0, 0x13)
	ROUND_00_15_PADD(Y4, Y5, Y6, Y7, Y0, Y1, Y2, Y3, TT0, 0x14)
	ROUND_00_15_PADD(Y3, Y4, Y5, Y6, Y7, Y0, Y1, Y2, TT0, 0x15)
	ROUND_00_15_PADD(Y2, Y3, Y4, Y5, Y6, Y7, Y0, Y1, TT0, 0x16)
	ROUND_00_15_PADD(Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y0, TT0, 0x17)
	ROUND_00_15_PADD(Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, TT0, 0x18)
	ROUND_00_15_PADD(Y7, Y0, Y1, Y2, Y3, Y4, Y5, Y6, TT0, 0x19)
	ROUND_00_15_PADD(Y6, Y7, Y0, Y1, Y2, Y3, Y4, Y5, TT0, 0x1a)
	ROUND_00_15_PADD(Y5, Y6, Y7, Y0, Y1, Y2, Y3, Y4, TT0, 0x1b)
	ROUND_00_15_PADD(Y4, Y5, Y6, Y7, Y0, Y1, Y2, Y3, TT0, 0x1c)
	ROUND_00_15_PADD(Y3, Y4, Y5, Y6, Y7, Y0, Y1, Y2, TT0, 0x1d)
	ROUND_00_15_PADD(Y2, Y3, Y4, Y5, Y6, Y7, Y0, Y1, TT0, 0x1e)
	ROUND_00_15_PADD(Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y0, TT0, 0x1f)

	ROUND_00_15_PADD(Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, TT0, 0x20)
	ROUND_00_15_PADD(Y7, Y0, Y1, Y2, Y3, Y4, Y5, Y6, TT0, 0x21)
	ROUND_00_15_PADD(Y6, Y7, Y0, Y1, Y2, Y3, Y4, Y5, TT0, 0x22)
	ROUND_00_15_PADD(Y5, Y6, Y7, Y0, Y1, Y2, Y3, Y4, TT0, 0x23)
	ROUND_00_15_PADD(Y4, Y5, Y6, Y7, Y0, Y1, Y2, Y3, TT0, 0x24)
	ROUND_00_15_PADD(Y3, Y4, Y5, Y6, Y7, Y0, Y1, Y2, TT0, 0x25)
	ROUND_00_15_PADD(Y2, Y3, Y4, Y5, Y6, Y7, Y0, Y1, TT0, 0x26)
	ROUND_00_15_PADD(Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y0, TT0, 0x27)
	ROUND_00_15_PADD(Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, TT0, 0x28)
	ROUND_00_15_PADD(Y7, Y0, Y1, Y2, Y3, Y4, Y5, Y6, TT0, 0x29)
	ROUND_00_15_PADD(Y6, Y7, Y0, Y1, Y2, Y3, Y4, Y5, TT0, 0x2a)
	ROUND_00_15_PADD(Y5, Y6, Y7, Y0, Y1, Y2, Y3, Y4, TT0, 0x2b)
	ROUND_00_15_PADD(Y4, Y5, Y6, Y7, Y0, Y1, Y2, Y3, TT0, 0x2c)
	ROUND_00_15_PADD(Y3, Y4, Y5, Y6, Y7, Y0, Y1, Y2, TT0, 0x2d)
	ROUND_00_15_PADD(Y2, Y3, Y4, Y5, Y6, Y7, Y0, Y1, TT0, 0x2e)
	ROUND_00_15_PADD(Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y0, TT0, 0x2f)

	ROUND_00_15_PADD(Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, TT0, 0x30)
	ROUND_00_15_PADD(Y7, Y0, Y1, Y2, Y3, Y4, Y5, Y6, TT0, 0x31)
	ROUND_00_15_PADD(Y6, Y7, Y0, Y1, Y2, Y3, Y4, Y5, TT0, 0x32)
	ROUND_00_15_PADD(Y5, Y6, Y7, Y0, Y1, Y2, Y3, Y4, TT0, 0x33)
	ROUND_00_15_PADD(Y4, Y5, Y6, Y7, Y0, Y1, Y2, Y3, TT0, 0x34)
	ROUND_00_15_PADD(Y3, Y4, Y5, Y6, Y7, Y0, Y1, Y2, TT0, 0x35)
	ROUND_00_15_PADD(Y2, Y3, Y4, Y5, Y6, Y7, Y0, Y1, TT0, 0x36)
	ROUND_00_15_PADD(Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y0, TT0, 0x37)
	ROUND_00_15_PADD(Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, TT0, 0x38)
	ROUND_00_15_PADD(Y7, Y0, Y1, Y2, Y3, Y4, Y5, Y6, TT0, 0x39)
	ROUND_00_15_PADD(Y6, Y7, Y0, Y1, Y2, Y3, Y4, Y5, TT0, 0x3a)
	ROUND_00_15_PADD(Y5, Y6, Y7, Y0, Y1, Y2, Y3, Y4, TT0, 0x3b)
	ROUND_00_15_PADD(Y4, Y5, Y6, Y7, Y0, Y1, Y2, Y3, TT0, 0x3c)
	ROUND_00_15_PADD(Y3, Y4, Y5, Y6, Y7, Y0, Y1, Y2, TT0, 0x3d)
	ROUND_00_15_PADD(Y2, Y3, Y4, Y5, Y6, Y7, Y0, Y1, TT0, 0x3e)
	ROUND_00_15_PADD(Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y0, TT0, 0x3f)

	// add previous digest
	VPADDD	(_DIGEST + 0*32)(SP), Y0, Y0
	VPADDD	(_DIGEST + 1*32)(SP), Y1, Y1
	VPADDD	(_DIGEST + 2*32)(SP), Y2, Y2
	VPADDD	(_DIGEST + 3*32)(SP), Y3, Y3
	VPADDD	(_DIGEST + 4*32)(SP), Y4, Y4
	VPADDD	(_DIGEST + 5*32)(SP), Y5, Y5
	VPADDD	(_DIGEST + 6*32)(SP), Y6, Y6
	VPADDD	(_DIGEST + 7*32)(SP), Y7, Y7

	// transpose the digest and convert to little endian to get the registers correctly

	TRANSPOSE8_U32
	VMOVDQU	_PSHUFFLE_BYTE_FLIP_MASK_8<>(SB), TT0
	VPSHUFB TT0, Y0, Y0
	VPSHUFB TT0, Y1, Y1
	VPSHUFB TT0, Y2, Y2
	VPSHUFB TT0, Y3, Y3
	VPSHUFB TT0, Y4, Y4
	VPSHUFB TT0, Y5, Y5
	VPSHUFB TT0, Y6, Y6
	VPSHUFB TT0, Y7, Y7

	// write to output

	VMOVDQU Y0, (0*32)(OUTPUT_PTR)
	VMOVDQU Y1, (1*32)(OUTPUT_PTR)
	VMOVDQU Y2, (2*32)(OUTPUT_PTR)
	VMOVDQU Y3, (3*32)(OUTPUT_PTR)
	VMOVDQU Y4, (4*32)(OUTPUT_PTR)
	VMOVDQU Y5, (5*32)(OUTPUT_PTR)
	VMOVDQU Y6, (6*32)(OUTPUT_PTR)
	VMOVDQU Y7, (7*32)(OUTPUT_PTR)

	// update pointers and loop

        ADDQ 	$512, DATA_PTR
	ADDQ 	$256, OUTPUT_PTR
	SUBL 	$8, NUM_BLKS

	JMP    sha256_8_avx2_loop

avx1:
	VMOVDQU		_PSHUFFLE_BYTE_FLIP_MASK_8<>(SB), _BYTE_FLIP_MASK
	VMOVDQU 	PSHUF_00BA<>(SB), _SHUF_00BA
	VMOVDQU		PSHUF_DC00<>(SB), _SHUF_DC00 

	MOVQ digests+0(FP), OUTPUT_PTR // digests *[][32]byte
	MOVQ p_base+8(FP), DATA_PTR  // p [][32]byte
	MOVL count+32(FP), NUM_BLKS  // NUM_BLKS uint32

        SHLQ         $5, NUM_BLKS
        ADDQ         OUTPUT_PTR, NUM_BLKS

sha256_avx_1_loop:
        CMPQ     OUTPUT_PTR, NUM_BLKS
        JEQ      sha256_1_avx_epilog

	// load initial digest
	MOVL $0x6A09E667, RAL  // a = H0
	MOVL $0xBB67AE85, RBL  // b = H1
	MOVL $0x3C6EF372, RCL // c = H2
	MOVL $0xA54FF53A, RDL // d = H3
	MOVL $0x510E527F, REL // e = H4
	MOVL $0x9B05688C, RFL // f = H5
	MOVL $0x1F83D9AB, RGL // g = H6
	MOVL $0x5BE0CD19, RHL // h = H7

	MOVQ	$K256<>(SB), TBL

	// byte swap first 16 dwords
	COPY_XMM_AND_BSWAP(X0, 0*16(DATA_PTR), _BYTE_FLIP_MASK)
	COPY_XMM_AND_BSWAP(X1, 1*16(DATA_PTR), _BYTE_FLIP_MASK)
	COPY_XMM_AND_BSWAP(X2, 2*16(DATA_PTR), _BYTE_FLIP_MASK)
	COPY_XMM_AND_BSWAP(X3, 3*16(DATA_PTR), _BYTE_FLIP_MASK)

	// schedule 48 input dwords, by doing 3 rounds of 16 each
	VPADDD	0*16(TBL), X0, XFER
	VMOVDQU	XFER, (SP)
	FOUR_ROUNDS_AND_SCHED(RAL, RBL, RCL, RDL, REL, RFL, RGL, RHL, X0, X1, X2, X3)

	VPADDD	1*16(TBL), X1, XFER
	VMOVDQU	XFER, (SP)
	FOUR_ROUNDS_AND_SCHED(REL, RFL, RGL, RHL, RAL, RBL, RCL, RDL, X1, X2, X3, X0)

	VPADDD	2*16(TBL), X2, XFER
	VMOVDQU	XFER, (SP)
	FOUR_ROUNDS_AND_SCHED(RAL, RBL, RCL, RDL, REL, RFL, RGL, RHL, X2, X3, X0, X1)

	VPADDD	3*16(TBL), X3, XFER
	VMOVDQU	XFER, (SP)
	ADDQ	$(4*16), TBL
	FOUR_ROUNDS_AND_SCHED(REL, RFL, RGL, RHL, RAL, RBL, RCL, RDL, X3, X0, X1, X2)
	
	VPADDD	0*16(TBL), X0, XFER
	VMOVDQU	XFER, (SP)
	FOUR_ROUNDS_AND_SCHED(RAL, RBL, RCL, RDL, REL, RFL, RGL, RHL, X0, X1, X2, X3)

	VPADDD	1*16(TBL), X1, XFER
	VMOVDQU	XFER, (SP)
	FOUR_ROUNDS_AND_SCHED(REL, RFL, RGL, RHL, RAL, RBL, RCL, RDL, X1, X2, X3, X0)

	VPADDD	2*16(TBL), X2, XFER
	VMOVDQU	XFER, (SP)
	FOUR_ROUNDS_AND_SCHED(RAL, RBL, RCL, RDL, REL, RFL, RGL, RHL, X2, X3, X0, X1)

	VPADDD	3*16(TBL), X3, XFER
	VMOVDQU	XFER, (SP)
	ADDQ	$(4*16), TBL
	FOUR_ROUNDS_AND_SCHED(REL, RFL, RGL, RHL, RAL, RBL, RCL, RDL, X3, X0, X1, X2)

	VPADDD	0*16(TBL), X0, XFER
	VMOVDQU	XFER, (SP)
	FOUR_ROUNDS_AND_SCHED(RAL, RBL, RCL, RDL, REL, RFL, RGL, RHL, X0, X1, X2, X3)

	VPADDD	1*16(TBL), X1, XFER
	VMOVDQU	XFER, (SP)
	FOUR_ROUNDS_AND_SCHED(REL, RFL, RGL, RHL, RAL, RBL, RCL, RDL, X1, X2, X3, X0)

	VPADDD	2*16(TBL), X2, XFER
	VMOVDQU	XFER, (SP)
	FOUR_ROUNDS_AND_SCHED(RAL, RBL, RCL, RDL, REL, RFL, RGL, RHL, X2, X3, X0, X1)

	VPADDD	3*16(TBL), X3, XFER
	VMOVDQU	XFER, (SP)
	ADDQ	$(4*16), TBL
	FOUR_ROUNDS_AND_SCHED(REL, RFL, RGL, RHL, RAL, RBL, RCL, RDL, X3, X0, X1, X2)

	// Final 16 rounds 
	VPADDD	0*16(TBL), X0, XFER 
	VMOVDQU	XFER, (SP)
	DO_ROUND(SP, 0, RAL, RBL, RCL, RDL, REL, RFL, RGL, RHL)
	DO_ROUND(SP, 4, RHL, RAL, RBL, RCL, RDL, REL, RFL, RGL)
	DO_ROUND(SP, 8, RGL, RHL, RAL, RBL, RCL, RDL, REL, RFL)
	DO_ROUND(SP, 12, RFL, RGL, RHL, RAL, RBL, RCL, RDL, REL)

	VPADDD	1*16(TBL), X1, XFER 
	VMOVDQU	XFER, (SP)
	ADDQ	$(2*16), TBL
	DO_ROUND(SP, 0, REL, RFL, RGL, RHL, RAL, RBL, RCL, RDL)
	DO_ROUND(SP, 4, RDL, REL, RFL, RGL, RHL, RAL, RBL, RCL)
	DO_ROUND(SP, 8, RCL, RDL, REL, RFL, RGL, RHL, RAL, RBL)
	DO_ROUND(SP, 12, RBL, RCL, RDL, REL, RFL, RGL, RHL, RAL)

	VMOVDQA	X2, X0
	VMOVDQA	X3, X1

	VPADDD	0*16(TBL), X0, XFER 
	VMOVDQU	XFER, (SP)
	DO_ROUND(SP, 0*4, RAL, RBL, RCL, RDL, REL, RFL, RGL, RHL)
	DO_ROUND(SP, 1*4, RHL, RAL, RBL, RCL, RDL, REL, RFL, RGL)
	DO_ROUND(SP, 2*4, RGL, RHL, RAL, RBL, RCL, RDL, REL, RFL)
	DO_ROUND(SP, 3*4, RFL, RGL, RHL, RAL, RBL, RCL, RDL, REL)

	VPADDD	1*16(TBL), X1, XFER 
	VMOVDQU	XFER, (SP)
	DO_ROUND(SP, 0, REL, RFL, RGL, RHL, RAL, RBL, RCL, RDL)
	DO_ROUND(SP, 4, RDL, REL, RFL, RGL, RHL, RAL, RBL, RCL)
	DO_ROUND(SP, 8, RCL, RDL, REL, RFL, RGL, RHL, RAL, RBL)
	DO_ROUND(SP, 12, RBL, RCL, RDL, REL, RFL, RGL, RHL, RAL)

	// Add initial digest and save it
	ADDL $0x6A09E667, RAL  // H0 = a + H0
	ADDL $0xBB67AE85, RBL  // H1 = b + H1
	ADDL $0x3C6EF372, RCL // H2 = c + H2
	ADDL $0xA54FF53A, RDL // H3 = d + H3
	ADDL $0x510E527F, REL // H4 = e + H4
	ADDL $0x9B05688C, RFL // H5 = f + H5
	ADDL $0x1F83D9AB, RGL // H6 = g + H6
	ADDL $0x5BE0CD19, RHL // H7 = h + H7


	MOVL RAL, tmpdig-(0*4)(SP)
	MOVL RBL, tmpdig-(1*4)(SP)
	MOVL RCL, tmpdig-(2*4)(SP)
	MOVL RDL, tmpdig-(3*4)(SP)
	MOVL REL, tmpdig-(4*4)(SP)
	MOVL RFL, tmpdig-(5*4)(SP)
	MOVL RGL, tmpdig-(6*4)(SP)
	MOVL RHL, tmpdig-(7*4)(SP)

	MOVQ	$PADDING<>(SB), TBL

	DO_ROUND(TBL, 0, RAL, RBL, RCL, RDL, REL, RFL, RGL, RHL)
	DO_ROUND(TBL, 4, RHL, RAL, RBL, RCL, RDL, REL, RFL, RGL)
	DO_ROUND(TBL, 8, RGL, RHL, RAL, RBL, RCL, RDL, REL, RFL)
	DO_ROUND(TBL, 12, RFL, RGL, RHL, RAL, RBL, RCL, RDL, REL)
	DO_ROUND(TBL, 16, REL, RFL, RGL, RHL, RAL, RBL, RCL, RDL)
	DO_ROUND(TBL, 20, RDL, REL, RFL, RGL, RHL, RAL, RBL, RCL)
	DO_ROUND(TBL, 24, RCL, RDL, REL, RFL, RGL, RHL, RAL, RBL)
	DO_ROUND(TBL, 28, RBL, RCL, RDL, REL, RFL, RGL, RHL, RAL)
	ADDQ	$32, TBL

	DO_ROUND(TBL, 0, RAL, RBL, RCL, RDL, REL, RFL, RGL, RHL)
	DO_ROUND(TBL, 4, RHL, RAL, RBL, RCL, RDL, REL, RFL, RGL)
	DO_ROUND(TBL, 8, RGL, RHL, RAL, RBL, RCL, RDL, REL, RFL)
	DO_ROUND(TBL, 12, RFL, RGL, RHL, RAL, RBL, RCL, RDL, REL)
	DO_ROUND(TBL, 16, REL, RFL, RGL, RHL, RAL, RBL, RCL, RDL)
	DO_ROUND(TBL, 20, RDL, REL, RFL, RGL, RHL, RAL, RBL, RCL)
	DO_ROUND(TBL, 24, RCL, RDL, REL, RFL, RGL, RHL, RAL, RBL)
	DO_ROUND(TBL, 28, RBL, RCL, RDL, REL, RFL, RGL, RHL, RAL)
	ADDQ	$32, TBL


	DO_ROUND(TBL, 0, RAL, RBL, RCL, RDL, REL, RFL, RGL, RHL)
	DO_ROUND(TBL, 4, RHL, RAL, RBL, RCL, RDL, REL, RFL, RGL)
	DO_ROUND(TBL, 8, RGL, RHL, RAL, RBL, RCL, RDL, REL, RFL)
	DO_ROUND(TBL, 12, RFL, RGL, RHL, RAL, RBL, RCL, RDL, REL)
	DO_ROUND(TBL, 16, REL, RFL, RGL, RHL, RAL, RBL, RCL, RDL)
	DO_ROUND(TBL, 20, RDL, REL, RFL, RGL, RHL, RAL, RBL, RCL)
	DO_ROUND(TBL, 24, RCL, RDL, REL, RFL, RGL, RHL, RAL, RBL)
	DO_ROUND(TBL, 28, RBL, RCL, RDL, REL, RFL, RGL, RHL, RAL)
	ADDQ	$32, TBL


	DO_ROUND(TBL, 0, RAL, RBL, RCL, RDL, REL, RFL, RGL, RHL)
	DO_ROUND(TBL, 4, RHL, RAL, RBL, RCL, RDL, REL, RFL, RGL)
	DO_ROUND(TBL, 8, RGL, RHL, RAL, RBL, RCL, RDL, REL, RFL)
	DO_ROUND(TBL, 12, RFL, RGL, RHL, RAL, RBL, RCL, RDL, REL)
	DO_ROUND(TBL, 16, REL, RFL, RGL, RHL, RAL, RBL, RCL, RDL)
	DO_ROUND(TBL, 20, RDL, REL, RFL, RGL, RHL, RAL, RBL, RCL)
	DO_ROUND(TBL, 24, RCL, RDL, REL, RFL, RGL, RHL, RAL, RBL)
	DO_ROUND(TBL, 28, RBL, RCL, RDL, REL, RFL, RGL, RHL, RAL)
	ADDQ	$32, TBL


	DO_ROUND(TBL, 0, RAL, RBL, RCL, RDL, REL, RFL, RGL, RHL)
	DO_ROUND(TBL, 4, RHL, RAL, RBL, RCL, RDL, REL, RFL, RGL)
	DO_ROUND(TBL, 8, RGL, RHL, RAL, RBL, RCL, RDL, REL, RFL)
	DO_ROUND(TBL, 12, RFL, RGL, RHL, RAL, RBL, RCL, RDL, REL)
	DO_ROUND(TBL, 16, REL, RFL, RGL, RHL, RAL, RBL, RCL, RDL)
	DO_ROUND(TBL, 20, RDL, REL, RFL, RGL, RHL, RAL, RBL, RCL)
	DO_ROUND(TBL, 24, RCL, RDL, REL, RFL, RGL, RHL, RAL, RBL)
	DO_ROUND(TBL, 28, RBL, RCL, RDL, REL, RFL, RGL, RHL, RAL)
	ADDQ	$32, TBL


	DO_ROUND(TBL, 0, RAL, RBL, RCL, RDL, REL, RFL, RGL, RHL)
	DO_ROUND(TBL, 4, RHL, RAL, RBL, RCL, RDL, REL, RFL, RGL)
	DO_ROUND(TBL, 8, RGL, RHL, RAL, RBL, RCL, RDL, REL, RFL)
	DO_ROUND(TBL, 12, RFL, RGL, RHL, RAL, RBL, RCL, RDL, REL)
	DO_ROUND(TBL, 16, REL, RFL, RGL, RHL, RAL, RBL, RCL, RDL)
	DO_ROUND(TBL, 20, RDL, REL, RFL, RGL, RHL, RAL, RBL, RCL)
	DO_ROUND(TBL, 24, RCL, RDL, REL, RFL, RGL, RHL, RAL, RBL)
	DO_ROUND(TBL, 28, RBL, RCL, RDL, REL, RFL, RGL, RHL, RAL)
	ADDQ	$32, TBL


	DO_ROUND(TBL, 0, RAL, RBL, RCL, RDL, REL, RFL, RGL, RHL)
	DO_ROUND(TBL, 4, RHL, RAL, RBL, RCL, RDL, REL, RFL, RGL)
	DO_ROUND(TBL, 8, RGL, RHL, RAL, RBL, RCL, RDL, REL, RFL)
	DO_ROUND(TBL, 12, RFL, RGL, RHL, RAL, RBL, RCL, RDL, REL)
	DO_ROUND(TBL, 16, REL, RFL, RGL, RHL, RAL, RBL, RCL, RDL)
	DO_ROUND(TBL, 20, RDL, REL, RFL, RGL, RHL, RAL, RBL, RCL)
	DO_ROUND(TBL, 24, RCL, RDL, REL, RFL, RGL, RHL, RAL, RBL)
	DO_ROUND(TBL, 28, RBL, RCL, RDL, REL, RFL, RGL, RHL, RAL)
	ADDQ	$32, TBL


	DO_ROUND(TBL, 0, RAL, RBL, RCL, RDL, REL, RFL, RGL, RHL)
	DO_ROUND(TBL, 4, RHL, RAL, RBL, RCL, RDL, REL, RFL, RGL)
	DO_ROUND(TBL, 8, RGL, RHL, RAL, RBL, RCL, RDL, REL, RFL)
	DO_ROUND(TBL, 12, RFL, RGL, RHL, RAL, RBL, RCL, RDL, REL)
	DO_ROUND(TBL, 16, REL, RFL, RGL, RHL, RAL, RBL, RCL, RDL)
	DO_ROUND(TBL, 20, RDL, REL, RFL, RGL, RHL, RAL, RBL, RCL)
	DO_ROUND(TBL, 24, RCL, RDL, REL, RFL, RGL, RHL, RAL, RBL)
	DO_ROUND(TBL, 28, RBL, RCL, RDL, REL, RFL, RGL, RHL, RAL)

	// add the previous digest

	ADDL tmpdig-(0*4)(SP), RAL
	ADDL tmpdig-(1*4)(SP), RBL
	ADDL tmpdig-(2*4)(SP), RCL
	ADDL tmpdig-(3*4)(SP), RDL
	ADDL tmpdig-(4*4)(SP), REL
	ADDL tmpdig-(5*4)(SP), RFL
	ADDL tmpdig-(6*4)(SP), RGL
	ADDL tmpdig-(7*4)(SP), RHL

	BSWAPL	RAL
	BSWAPL	RBL
	BSWAPL	RCL
	BSWAPL	RDL
	BSWAPL	REL
	BSWAPL	RFL
	BSWAPL	RGL
	BSWAPL	RHL

	MOVL	RAL, (0*4)(OUTPUT_PTR)
	MOVL	RBL, (1*4)(OUTPUT_PTR)
	MOVL	RCL, (2*4)(OUTPUT_PTR)
	MOVL	RDL, (3*4)(OUTPUT_PTR)
	MOVL	REL, (4*4)(OUTPUT_PTR)
	MOVL	RFL, (5*4)(OUTPUT_PTR)
	MOVL	RGL, (6*4)(OUTPUT_PTR)
	MOVL	RHL, (7*4)(OUTPUT_PTR)

	ADDQ $64, DATA_PTR
	ADDQ $32, OUTPUT_PTR
	JMP sha256_avx_1_loop

sha256_1_avx_epilog:
	RET

// Data section
DATA K256<>+0x00(SB)/4, 	$0x428a2f98
DATA K256<>+0x04(SB)/4, 	$0x71374491
DATA K256<>+0x08(SB)/4, 	$0xb5c0fbcf
DATA K256<>+0x0c(SB)/4, 	$0xe9b5dba5
DATA K256<>+0x10(SB)/4, 	$0x3956c25b
DATA K256<>+0x14(SB)/4, 	$0x59f111f1
DATA K256<>+0x18(SB)/4, 	$0x923f82a4
DATA K256<>+0x1c(SB)/4, 	$0xab1c5ed5
DATA K256<>+0x20(SB)/4, 	$0xd807aa98
DATA K256<>+0x24(SB)/4, 	$0x12835b01
DATA K256<>+0x28(SB)/4, 	$0x243185be
DATA K256<>+0x2c(SB)/4, 	$0x550c7dc3
DATA K256<>+0x30(SB)/4, 	$0x72be5d74
DATA K256<>+0x34(SB)/4, 	$0x80deb1fe
DATA K256<>+0x38(SB)/4, 	$0x9bdc06a7
DATA K256<>+0x3c(SB)/4, 	$0xc19bf174
DATA K256<>+0x40(SB)/4, 	$0xe49b69c1
DATA K256<>+0x44(SB)/4, 	$0xefbe4786
DATA K256<>+0x48(SB)/4, 	$0x0fc19dc6
DATA K256<>+0x4c(SB)/4, 	$0x240ca1cc
DATA K256<>+0x50(SB)/4, 	$0x2de92c6f
DATA K256<>+0x54(SB)/4, 	$0x4a7484aa
DATA K256<>+0x58(SB)/4, 	$0x5cb0a9dc
DATA K256<>+0x5c(SB)/4, 	$0x76f988da
DATA K256<>+0x60(SB)/4, 	$0x983e5152
DATA K256<>+0x64(SB)/4, 	$0xa831c66d
DATA K256<>+0x68(SB)/4, 	$0xb00327c8
DATA K256<>+0x6c(SB)/4, 	$0xbf597fc7
DATA K256<>+0x70(SB)/4, 	$0xc6e00bf3
DATA K256<>+0x74(SB)/4, 	$0xd5a79147
DATA K256<>+0x78(SB)/4, 	$0x06ca6351
DATA K256<>+0x7c(SB)/4, 	$0x14292967
DATA K256<>+0x80(SB)/4, 	$0x27b70a85
DATA K256<>+0x84(SB)/4, 	$0x2e1b2138
DATA K256<>+0x88(SB)/4, 	$0x4d2c6dfc
DATA K256<>+0x8c(SB)/4, 	$0x53380d13
DATA K256<>+0x90(SB)/4, 	$0x650a7354
DATA K256<>+0x94(SB)/4, 	$0x766a0abb
DATA K256<>+0x98(SB)/4, 	$0x81c2c92e
DATA K256<>+0x9c(SB)/4, 	$0x92722c85
DATA K256<>+0xa0(SB)/4, 	$0xa2bfe8a1
DATA K256<>+0xa4(SB)/4, 	$0xa81a664b
DATA K256<>+0xa8(SB)/4, 	$0xc24b8b70
DATA K256<>+0xac(SB)/4, 	$0xc76c51a3
DATA K256<>+0xb0(SB)/4, 	$0xd192e819
DATA K256<>+0xb4(SB)/4, 	$0xd6990624
DATA K256<>+0xb8(SB)/4, 	$0xf40e3585
DATA K256<>+0xbc(SB)/4, 	$0x106aa070
DATA K256<>+0xc0(SB)/4, 	$0x19a4c116
DATA K256<>+0xc4(SB)/4, 	$0x1e376c08
DATA K256<>+0xc8(SB)/4, 	$0x2748774c
DATA K256<>+0xcc(SB)/4, 	$0x34b0bcb5
DATA K256<>+0xd0(SB)/4, 	$0x391c0cb3
DATA K256<>+0xd4(SB)/4, 	$0x4ed8aa4a
DATA K256<>+0xd8(SB)/4, 	$0x5b9cca4f
DATA K256<>+0xdc(SB)/4, 	$0x682e6ff3
DATA K256<>+0xe0(SB)/4, 	$0x748f82ee
DATA K256<>+0xe4(SB)/4, 	$0x78a5636f
DATA K256<>+0xe8(SB)/4, 	$0x84c87814
DATA K256<>+0xec(SB)/4, 	$0x8cc70208
DATA K256<>+0xf0(SB)/4, 	$0x90befffa
DATA K256<>+0xf4(SB)/4, 	$0xa4506ceb
DATA K256<>+0xf8(SB)/4, 	$0xbef9a3f7
DATA K256<>+0xfc(SB)/4, 	$0xc67178f2
GLOBL K256<>(SB),(NOPTR+RODATA),$256

DATA PADDING<>+0x00(SB)/4, $0xc28a2f98
DATA PADDING<>+0x04(SB)/4, $0x71374491
DATA PADDING<>+0x08(SB)/4, $0xb5c0fbcf
DATA PADDING<>+0x0c(SB)/4, $0xe9b5dba5
DATA PADDING<>+0x10(SB)/4, $0x3956c25b
DATA PADDING<>+0x14(SB)/4, $0x59f111f1
DATA PADDING<>+0x18(SB)/4, $0x923f82a4
DATA PADDING<>+0x1c(SB)/4, $0xab1c5ed5
DATA PADDING<>+0x20(SB)/4, $0xd807aa98
DATA PADDING<>+0x24(SB)/4, $0x12835b01
DATA PADDING<>+0x28(SB)/4, $0x243185be
DATA PADDING<>+0x2c(SB)/4, $0x550c7dc3
DATA PADDING<>+0x30(SB)/4, $0x72be5d74
DATA PADDING<>+0x34(SB)/4, $0x80deb1fe
DATA PADDING<>+0x38(SB)/4, $0x9bdc06a7
DATA PADDING<>+0x3c(SB)/4, $0xc19bf374
DATA PADDING<>+0x40(SB)/4, $0x649b69c1
DATA PADDING<>+0x44(SB)/4, $0xf0fe4786
DATA PADDING<>+0x48(SB)/4, $0x0fe1edc6
DATA PADDING<>+0x4c(SB)/4, $0x240cf254
DATA PADDING<>+0x50(SB)/4, $0x4fe9346f
DATA PADDING<>+0x54(SB)/4, $0x6cc984be
DATA PADDING<>+0x58(SB)/4, $0x61b9411e
DATA PADDING<>+0x5c(SB)/4, $0x16f988fa
DATA PADDING<>+0x60(SB)/4, $0xf2c65152
DATA PADDING<>+0x64(SB)/4, $0xa88e5a6d
DATA PADDING<>+0x68(SB)/4, $0xb019fc65
DATA PADDING<>+0x6c(SB)/4, $0xb9d99ec7
DATA PADDING<>+0x70(SB)/4, $0x9a1231c3
DATA PADDING<>+0x74(SB)/4, $0xe70eeaa0
DATA PADDING<>+0x78(SB)/4, $0xfdb1232b
DATA PADDING<>+0x7c(SB)/4, $0xc7353eb0
DATA PADDING<>+0x80(SB)/4, $0x3069bad5
DATA PADDING<>+0x84(SB)/4, $0xcb976d5f
DATA PADDING<>+0x88(SB)/4, $0x5a0f118f
DATA PADDING<>+0x8c(SB)/4, $0xdc1eeefd
DATA PADDING<>+0x90(SB)/4, $0x0a35b689
DATA PADDING<>+0x94(SB)/4, $0xde0b7a04
DATA PADDING<>+0x98(SB)/4, $0x58f4ca9d
DATA PADDING<>+0x9c(SB)/4, $0xe15d5b16
DATA PADDING<>+0xa0(SB)/4, $0x007f3e86
DATA PADDING<>+0xa4(SB)/4, $0x37088980
DATA PADDING<>+0xa8(SB)/4, $0xa507ea32
DATA PADDING<>+0xac(SB)/4, $0x6fab9537
DATA PADDING<>+0xb0(SB)/4, $0x17406110
DATA PADDING<>+0xb4(SB)/4, $0x0d8cd6f1
DATA PADDING<>+0xb8(SB)/4, $0xcdaa3b6d
DATA PADDING<>+0xbc(SB)/4, $0xc0bbbe37
DATA PADDING<>+0xc0(SB)/4, $0x83613bda
DATA PADDING<>+0xc4(SB)/4, $0xdb48a363
DATA PADDING<>+0xc8(SB)/4, $0x0b02e931
DATA PADDING<>+0xcc(SB)/4, $0x6fd15ca7
DATA PADDING<>+0xd0(SB)/4, $0x521afaca
DATA PADDING<>+0xd4(SB)/4, $0x31338431
DATA PADDING<>+0xd8(SB)/4, $0x6ed41a95
DATA PADDING<>+0xdc(SB)/4, $0x6d437890
DATA PADDING<>+0xe0(SB)/4, $0xc39c91f2
DATA PADDING<>+0xe4(SB)/4, $0x9eccabbd
DATA PADDING<>+0xe8(SB)/4, $0xb5c9a0e6
DATA PADDING<>+0xec(SB)/4, $0x532fb63c
DATA PADDING<>+0xf0(SB)/4, $0xd2c741c6
DATA PADDING<>+0xf4(SB)/4, $0x07237ea3
DATA PADDING<>+0xf8(SB)/4, $0xa4954b68
DATA PADDING<>+0xfc(SB)/4, $0x4c191d76
GLOBL PADDING<>(SB),(NOPTR+RODATA),$256

DATA PSHUF_00BA<>+0x00(SB)/8, $0x0b0a090803020100
DATA PSHUF_00BA<>+0x08(SB)/8, $0xFFFFFFFFFFFFFFFF
GLOBL PSHUF_00BA<>(SB),(NOPTR+RODATA),$16

DATA PSHUF_DC00<>+0x00(SB)/8, $0xFFFFFFFFFFFFFFFF
DATA PSHUF_DC00<>+0x08(SB)/8, $0x0b0a090803020100
GLOBL PSHUF_DC00<>(SB),(NOPTR+RODATA),$16

// Data section AVX2 x8
DATA _K256_8<>+0(SB)/8, $0x428a2f98428a2f98
DATA _K256_8<>+8(SB)/8, $0x428a2f98428a2f98
DATA _K256_8<>+16(SB)/8, $0x428a2f98428a2f98
DATA _K256_8<>+24(SB)/8, $0x428a2f98428a2f98
DATA _K256_8<>+32(SB)/8, $0x7137449171374491
DATA _K256_8<>+40(SB)/8, $0x7137449171374491
DATA _K256_8<>+48(SB)/8, $0x7137449171374491
DATA _K256_8<>+56(SB)/8, $0x7137449171374491
DATA _K256_8<>+64(SB)/8, $0xb5c0fbcfb5c0fbcf
DATA _K256_8<>+72(SB)/8, $0xb5c0fbcfb5c0fbcf
DATA _K256_8<>+80(SB)/8, $0xb5c0fbcfb5c0fbcf
DATA _K256_8<>+88(SB)/8, $0xb5c0fbcfb5c0fbcf
DATA _K256_8<>+96(SB)/8, $0xe9b5dba5e9b5dba5
DATA _K256_8<>+104(SB)/8, $0xe9b5dba5e9b5dba5
DATA _K256_8<>+112(SB)/8, $0xe9b5dba5e9b5dba5
DATA _K256_8<>+120(SB)/8, $0xe9b5dba5e9b5dba5
DATA _K256_8<>+128(SB)/8, $0x3956c25b3956c25b
DATA _K256_8<>+136(SB)/8, $0x3956c25b3956c25b
DATA _K256_8<>+144(SB)/8, $0x3956c25b3956c25b
DATA _K256_8<>+152(SB)/8, $0x3956c25b3956c25b
DATA _K256_8<>+160(SB)/8, $0x59f111f159f111f1
DATA _K256_8<>+168(SB)/8, $0x59f111f159f111f1
DATA _K256_8<>+176(SB)/8, $0x59f111f159f111f1
DATA _K256_8<>+184(SB)/8, $0x59f111f159f111f1
DATA _K256_8<>+192(SB)/8, $0x923f82a4923f82a4
DATA _K256_8<>+200(SB)/8, $0x923f82a4923f82a4
DATA _K256_8<>+208(SB)/8, $0x923f82a4923f82a4
DATA _K256_8<>+216(SB)/8, $0x923f82a4923f82a4
DATA _K256_8<>+224(SB)/8, $0xab1c5ed5ab1c5ed5
DATA _K256_8<>+232(SB)/8, $0xab1c5ed5ab1c5ed5
DATA _K256_8<>+240(SB)/8, $0xab1c5ed5ab1c5ed5
DATA _K256_8<>+248(SB)/8, $0xab1c5ed5ab1c5ed5
DATA _K256_8<>+256(SB)/8, $0xd807aa98d807aa98
DATA _K256_8<>+264(SB)/8, $0xd807aa98d807aa98
DATA _K256_8<>+272(SB)/8, $0xd807aa98d807aa98
DATA _K256_8<>+280(SB)/8, $0xd807aa98d807aa98
DATA _K256_8<>+288(SB)/8, $0x12835b0112835b01
DATA _K256_8<>+296(SB)/8, $0x12835b0112835b01
DATA _K256_8<>+304(SB)/8, $0x12835b0112835b01
DATA _K256_8<>+312(SB)/8, $0x12835b0112835b01
DATA _K256_8<>+320(SB)/8, $0x243185be243185be
DATA _K256_8<>+328(SB)/8, $0x243185be243185be
DATA _K256_8<>+336(SB)/8, $0x243185be243185be
DATA _K256_8<>+344(SB)/8, $0x243185be243185be
DATA _K256_8<>+352(SB)/8, $0x550c7dc3550c7dc3
DATA _K256_8<>+360(SB)/8, $0x550c7dc3550c7dc3
DATA _K256_8<>+368(SB)/8, $0x550c7dc3550c7dc3
DATA _K256_8<>+376(SB)/8, $0x550c7dc3550c7dc3
DATA _K256_8<>+384(SB)/8, $0x72be5d7472be5d74
DATA _K256_8<>+392(SB)/8, $0x72be5d7472be5d74
DATA _K256_8<>+400(SB)/8, $0x72be5d7472be5d74
DATA _K256_8<>+408(SB)/8, $0x72be5d7472be5d74
DATA _K256_8<>+416(SB)/8, $0x80deb1fe80deb1fe
DATA _K256_8<>+424(SB)/8, $0x80deb1fe80deb1fe
DATA _K256_8<>+432(SB)/8, $0x80deb1fe80deb1fe
DATA _K256_8<>+440(SB)/8, $0x80deb1fe80deb1fe
DATA _K256_8<>+448(SB)/8, $0x9bdc06a79bdc06a7
DATA _K256_8<>+456(SB)/8, $0x9bdc06a79bdc06a7
DATA _K256_8<>+464(SB)/8, $0x9bdc06a79bdc06a7
DATA _K256_8<>+472(SB)/8, $0x9bdc06a79bdc06a7
DATA _K256_8<>+480(SB)/8, $0xc19bf174c19bf174
DATA _K256_8<>+488(SB)/8, $0xc19bf174c19bf174
DATA _K256_8<>+496(SB)/8, $0xc19bf174c19bf174
DATA _K256_8<>+504(SB)/8, $0xc19bf174c19bf174
DATA _K256_8<>+512(SB)/8, $0xe49b69c1e49b69c1
DATA _K256_8<>+520(SB)/8, $0xe49b69c1e49b69c1
DATA _K256_8<>+528(SB)/8, $0xe49b69c1e49b69c1
DATA _K256_8<>+536(SB)/8, $0xe49b69c1e49b69c1
DATA _K256_8<>+544(SB)/8, $0xefbe4786efbe4786
DATA _K256_8<>+552(SB)/8, $0xefbe4786efbe4786
DATA _K256_8<>+560(SB)/8, $0xefbe4786efbe4786
DATA _K256_8<>+568(SB)/8, $0xefbe4786efbe4786
DATA _K256_8<>+576(SB)/8, $0x0fc19dc60fc19dc6
DATA _K256_8<>+584(SB)/8, $0x0fc19dc60fc19dc6
DATA _K256_8<>+592(SB)/8, $0x0fc19dc60fc19dc6
DATA _K256_8<>+600(SB)/8, $0x0fc19dc60fc19dc6
DATA _K256_8<>+608(SB)/8, $0x240ca1cc240ca1cc
DATA _K256_8<>+616(SB)/8, $0x240ca1cc240ca1cc
DATA _K256_8<>+624(SB)/8, $0x240ca1cc240ca1cc
DATA _K256_8<>+632(SB)/8, $0x240ca1cc240ca1cc
DATA _K256_8<>+640(SB)/8, $0x2de92c6f2de92c6f
DATA _K256_8<>+648(SB)/8, $0x2de92c6f2de92c6f
DATA _K256_8<>+656(SB)/8, $0x2de92c6f2de92c6f
DATA _K256_8<>+664(SB)/8, $0x2de92c6f2de92c6f
DATA _K256_8<>+672(SB)/8, $0x4a7484aa4a7484aa
DATA _K256_8<>+680(SB)/8, $0x4a7484aa4a7484aa
DATA _K256_8<>+688(SB)/8, $0x4a7484aa4a7484aa
DATA _K256_8<>+696(SB)/8, $0x4a7484aa4a7484aa
DATA _K256_8<>+704(SB)/8, $0x5cb0a9dc5cb0a9dc
DATA _K256_8<>+712(SB)/8, $0x5cb0a9dc5cb0a9dc
DATA _K256_8<>+720(SB)/8, $0x5cb0a9dc5cb0a9dc
DATA _K256_8<>+728(SB)/8, $0x5cb0a9dc5cb0a9dc
DATA _K256_8<>+736(SB)/8, $0x76f988da76f988da
DATA _K256_8<>+744(SB)/8, $0x76f988da76f988da
DATA _K256_8<>+752(SB)/8, $0x76f988da76f988da
DATA _K256_8<>+760(SB)/8, $0x76f988da76f988da
DATA _K256_8<>+768(SB)/8, $0x983e5152983e5152
DATA _K256_8<>+776(SB)/8, $0x983e5152983e5152
DATA _K256_8<>+784(SB)/8, $0x983e5152983e5152
DATA _K256_8<>+792(SB)/8, $0x983e5152983e5152
DATA _K256_8<>+800(SB)/8, $0xa831c66da831c66d
DATA _K256_8<>+808(SB)/8, $0xa831c66da831c66d
DATA _K256_8<>+816(SB)/8, $0xa831c66da831c66d
DATA _K256_8<>+824(SB)/8, $0xa831c66da831c66d
DATA _K256_8<>+832(SB)/8, $0xb00327c8b00327c8
DATA _K256_8<>+840(SB)/8, $0xb00327c8b00327c8
DATA _K256_8<>+848(SB)/8, $0xb00327c8b00327c8
DATA _K256_8<>+856(SB)/8, $0xb00327c8b00327c8
DATA _K256_8<>+864(SB)/8, $0xbf597fc7bf597fc7
DATA _K256_8<>+872(SB)/8, $0xbf597fc7bf597fc7
DATA _K256_8<>+880(SB)/8, $0xbf597fc7bf597fc7
DATA _K256_8<>+888(SB)/8, $0xbf597fc7bf597fc7
DATA _K256_8<>+896(SB)/8, $0xc6e00bf3c6e00bf3
DATA _K256_8<>+904(SB)/8, $0xc6e00bf3c6e00bf3
DATA _K256_8<>+912(SB)/8, $0xc6e00bf3c6e00bf3
DATA _K256_8<>+920(SB)/8, $0xc6e00bf3c6e00bf3
DATA _K256_8<>+928(SB)/8, $0xd5a79147d5a79147
DATA _K256_8<>+936(SB)/8, $0xd5a79147d5a79147
DATA _K256_8<>+944(SB)/8, $0xd5a79147d5a79147
DATA _K256_8<>+952(SB)/8, $0xd5a79147d5a79147
DATA _K256_8<>+960(SB)/8, $0x06ca635106ca6351
DATA _K256_8<>+968(SB)/8, $0x06ca635106ca6351
DATA _K256_8<>+976(SB)/8, $0x06ca635106ca6351
DATA _K256_8<>+984(SB)/8, $0x06ca635106ca6351
DATA _K256_8<>+992(SB)/8, $0x1429296714292967
DATA _K256_8<>+1000(SB)/8, $0x1429296714292967
DATA _K256_8<>+1008(SB)/8, $0x1429296714292967
DATA _K256_8<>+1016(SB)/8, $0x1429296714292967
DATA _K256_8<>+1024(SB)/8, $0x27b70a8527b70a85
DATA _K256_8<>+1032(SB)/8, $0x27b70a8527b70a85
DATA _K256_8<>+1040(SB)/8, $0x27b70a8527b70a85
DATA _K256_8<>+1048(SB)/8, $0x27b70a8527b70a85
DATA _K256_8<>+1056(SB)/8, $0x2e1b21382e1b2138
DATA _K256_8<>+1064(SB)/8, $0x2e1b21382e1b2138
DATA _K256_8<>+1072(SB)/8, $0x2e1b21382e1b2138
DATA _K256_8<>+1080(SB)/8, $0x2e1b21382e1b2138
DATA _K256_8<>+1088(SB)/8, $0x4d2c6dfc4d2c6dfc
DATA _K256_8<>+1096(SB)/8, $0x4d2c6dfc4d2c6dfc
DATA _K256_8<>+1104(SB)/8, $0x4d2c6dfc4d2c6dfc
DATA _K256_8<>+1112(SB)/8, $0x4d2c6dfc4d2c6dfc
DATA _K256_8<>+1120(SB)/8, $0x53380d1353380d13
DATA _K256_8<>+1128(SB)/8, $0x53380d1353380d13
DATA _K256_8<>+1136(SB)/8, $0x53380d1353380d13
DATA _K256_8<>+1144(SB)/8, $0x53380d1353380d13
DATA _K256_8<>+1152(SB)/8, $0x650a7354650a7354
DATA _K256_8<>+1160(SB)/8, $0x650a7354650a7354
DATA _K256_8<>+1168(SB)/8, $0x650a7354650a7354
DATA _K256_8<>+1176(SB)/8, $0x650a7354650a7354
DATA _K256_8<>+1184(SB)/8, $0x766a0abb766a0abb
DATA _K256_8<>+1192(SB)/8, $0x766a0abb766a0abb
DATA _K256_8<>+1200(SB)/8, $0x766a0abb766a0abb
DATA _K256_8<>+1208(SB)/8, $0x766a0abb766a0abb
DATA _K256_8<>+1216(SB)/8, $0x81c2c92e81c2c92e
DATA _K256_8<>+1224(SB)/8, $0x81c2c92e81c2c92e
DATA _K256_8<>+1232(SB)/8, $0x81c2c92e81c2c92e
DATA _K256_8<>+1240(SB)/8, $0x81c2c92e81c2c92e
DATA _K256_8<>+1248(SB)/8, $0x92722c8592722c85
DATA _K256_8<>+1256(SB)/8, $0x92722c8592722c85
DATA _K256_8<>+1264(SB)/8, $0x92722c8592722c85
DATA _K256_8<>+1272(SB)/8, $0x92722c8592722c85
DATA _K256_8<>+1280(SB)/8, $0xa2bfe8a1a2bfe8a1
DATA _K256_8<>+1288(SB)/8, $0xa2bfe8a1a2bfe8a1
DATA _K256_8<>+1296(SB)/8, $0xa2bfe8a1a2bfe8a1
DATA _K256_8<>+1304(SB)/8, $0xa2bfe8a1a2bfe8a1
DATA _K256_8<>+1312(SB)/8, $0xa81a664ba81a664b
DATA _K256_8<>+1320(SB)/8, $0xa81a664ba81a664b
DATA _K256_8<>+1328(SB)/8, $0xa81a664ba81a664b
DATA _K256_8<>+1336(SB)/8, $0xa81a664ba81a664b
DATA _K256_8<>+1344(SB)/8, $0xc24b8b70c24b8b70
DATA _K256_8<>+1352(SB)/8, $0xc24b8b70c24b8b70
DATA _K256_8<>+1360(SB)/8, $0xc24b8b70c24b8b70
DATA _K256_8<>+1368(SB)/8, $0xc24b8b70c24b8b70
DATA _K256_8<>+1376(SB)/8, $0xc76c51a3c76c51a3
DATA _K256_8<>+1384(SB)/8, $0xc76c51a3c76c51a3
DATA _K256_8<>+1392(SB)/8, $0xc76c51a3c76c51a3
DATA _K256_8<>+1400(SB)/8, $0xc76c51a3c76c51a3
DATA _K256_8<>+1408(SB)/8, $0xd192e819d192e819
DATA _K256_8<>+1416(SB)/8, $0xd192e819d192e819
DATA _K256_8<>+1424(SB)/8, $0xd192e819d192e819
DATA _K256_8<>+1432(SB)/8, $0xd192e819d192e819
DATA _K256_8<>+1440(SB)/8, $0xd6990624d6990624
DATA _K256_8<>+1448(SB)/8, $0xd6990624d6990624
DATA _K256_8<>+1456(SB)/8, $0xd6990624d6990624
DATA _K256_8<>+1464(SB)/8, $0xd6990624d6990624
DATA _K256_8<>+1472(SB)/8, $0xf40e3585f40e3585
DATA _K256_8<>+1480(SB)/8, $0xf40e3585f40e3585
DATA _K256_8<>+1488(SB)/8, $0xf40e3585f40e3585
DATA _K256_8<>+1496(SB)/8, $0xf40e3585f40e3585
DATA _K256_8<>+1504(SB)/8, $0x106aa070106aa070
DATA _K256_8<>+1512(SB)/8, $0x106aa070106aa070
DATA _K256_8<>+1520(SB)/8, $0x106aa070106aa070
DATA _K256_8<>+1528(SB)/8, $0x106aa070106aa070
DATA _K256_8<>+1536(SB)/8, $0x19a4c11619a4c116
DATA _K256_8<>+1544(SB)/8, $0x19a4c11619a4c116
DATA _K256_8<>+1552(SB)/8, $0x19a4c11619a4c116
DATA _K256_8<>+1560(SB)/8, $0x19a4c11619a4c116
DATA _K256_8<>+1568(SB)/8, $0x1e376c081e376c08
DATA _K256_8<>+1576(SB)/8, $0x1e376c081e376c08
DATA _K256_8<>+1584(SB)/8, $0x1e376c081e376c08
DATA _K256_8<>+1592(SB)/8, $0x1e376c081e376c08
DATA _K256_8<>+1600(SB)/8, $0x2748774c2748774c
DATA _K256_8<>+1608(SB)/8, $0x2748774c2748774c
DATA _K256_8<>+1616(SB)/8, $0x2748774c2748774c
DATA _K256_8<>+1624(SB)/8, $0x2748774c2748774c
DATA _K256_8<>+1632(SB)/8, $0x34b0bcb534b0bcb5
DATA _K256_8<>+1640(SB)/8, $0x34b0bcb534b0bcb5
DATA _K256_8<>+1648(SB)/8, $0x34b0bcb534b0bcb5
DATA _K256_8<>+1656(SB)/8, $0x34b0bcb534b0bcb5
DATA _K256_8<>+1664(SB)/8, $0x391c0cb3391c0cb3
DATA _K256_8<>+1672(SB)/8, $0x391c0cb3391c0cb3
DATA _K256_8<>+1680(SB)/8, $0x391c0cb3391c0cb3
DATA _K256_8<>+1688(SB)/8, $0x391c0cb3391c0cb3
DATA _K256_8<>+1696(SB)/8, $0x4ed8aa4a4ed8aa4a
DATA _K256_8<>+1704(SB)/8, $0x4ed8aa4a4ed8aa4a
DATA _K256_8<>+1712(SB)/8, $0x4ed8aa4a4ed8aa4a
DATA _K256_8<>+1720(SB)/8, $0x4ed8aa4a4ed8aa4a
DATA _K256_8<>+1728(SB)/8, $0x5b9cca4f5b9cca4f
DATA _K256_8<>+1736(SB)/8, $0x5b9cca4f5b9cca4f
DATA _K256_8<>+1744(SB)/8, $0x5b9cca4f5b9cca4f
DATA _K256_8<>+1752(SB)/8, $0x5b9cca4f5b9cca4f
DATA _K256_8<>+1760(SB)/8, $0x682e6ff3682e6ff3
DATA _K256_8<>+1768(SB)/8, $0x682e6ff3682e6ff3
DATA _K256_8<>+1776(SB)/8, $0x682e6ff3682e6ff3
DATA _K256_8<>+1784(SB)/8, $0x682e6ff3682e6ff3
DATA _K256_8<>+1792(SB)/8, $0x748f82ee748f82ee
DATA _K256_8<>+1800(SB)/8, $0x748f82ee748f82ee
DATA _K256_8<>+1808(SB)/8, $0x748f82ee748f82ee
DATA _K256_8<>+1816(SB)/8, $0x748f82ee748f82ee
DATA _K256_8<>+1824(SB)/8, $0x78a5636f78a5636f
DATA _K256_8<>+1832(SB)/8, $0x78a5636f78a5636f
DATA _K256_8<>+1840(SB)/8, $0x78a5636f78a5636f
DATA _K256_8<>+1848(SB)/8, $0x78a5636f78a5636f
DATA _K256_8<>+1856(SB)/8, $0x84c8781484c87814
DATA _K256_8<>+1864(SB)/8, $0x84c8781484c87814
DATA _K256_8<>+1872(SB)/8, $0x84c8781484c87814
DATA _K256_8<>+1880(SB)/8, $0x84c8781484c87814
DATA _K256_8<>+1888(SB)/8, $0x8cc702088cc70208
DATA _K256_8<>+1896(SB)/8, $0x8cc702088cc70208
DATA _K256_8<>+1904(SB)/8, $0x8cc702088cc70208
DATA _K256_8<>+1912(SB)/8, $0x8cc702088cc70208
DATA _K256_8<>+1920(SB)/8, $0x90befffa90befffa
DATA _K256_8<>+1928(SB)/8, $0x90befffa90befffa
DATA _K256_8<>+1936(SB)/8, $0x90befffa90befffa
DATA _K256_8<>+1944(SB)/8, $0x90befffa90befffa
DATA _K256_8<>+1952(SB)/8, $0xa4506ceba4506ceb
DATA _K256_8<>+1960(SB)/8, $0xa4506ceba4506ceb
DATA _K256_8<>+1968(SB)/8, $0xa4506ceba4506ceb
DATA _K256_8<>+1976(SB)/8, $0xa4506ceba4506ceb
DATA _K256_8<>+1984(SB)/8, $0xbef9a3f7bef9a3f7
DATA _K256_8<>+1992(SB)/8, $0xbef9a3f7bef9a3f7
DATA _K256_8<>+2000(SB)/8, $0xbef9a3f7bef9a3f7
DATA _K256_8<>+2008(SB)/8, $0xbef9a3f7bef9a3f7
DATA _K256_8<>+2016(SB)/8, $0xc67178f2c67178f2
DATA _K256_8<>+2024(SB)/8, $0xc67178f2c67178f2
DATA _K256_8<>+2032(SB)/8, $0xc67178f2c67178f2
DATA _K256_8<>+2040(SB)/8, $0xc67178f2c67178f2
GLOBL _K256_8<>(SB),(NOPTR+RODATA),$2048


DATA _PADDING_8<>+0(SB)/8, $0xc28a2f98c28a2f98
DATA _PADDING_8<>+8(SB)/8, $0xc28a2f98c28a2f98
DATA _PADDING_8<>+16(SB)/8, $0xc28a2f98c28a2f98
DATA _PADDING_8<>+24(SB)/8, $0xc28a2f98c28a2f98
DATA _PADDING_8<>+32(SB)/8, $0x7137449171374491
DATA _PADDING_8<>+40(SB)/8, $0x7137449171374491
DATA _PADDING_8<>+48(SB)/8, $0x7137449171374491
DATA _PADDING_8<>+56(SB)/8, $0x7137449171374491
DATA _PADDING_8<>+64(SB)/8, $0xb5c0fbcfb5c0fbcf
DATA _PADDING_8<>+72(SB)/8, $0xb5c0fbcfb5c0fbcf
DATA _PADDING_8<>+80(SB)/8, $0xb5c0fbcfb5c0fbcf
DATA _PADDING_8<>+88(SB)/8, $0xb5c0fbcfb5c0fbcf
DATA _PADDING_8<>+96(SB)/8, $0xe9b5dba5e9b5dba5
DATA _PADDING_8<>+104(SB)/8, $0xe9b5dba5e9b5dba5
DATA _PADDING_8<>+112(SB)/8, $0xe9b5dba5e9b5dba5
DATA _PADDING_8<>+120(SB)/8, $0xe9b5dba5e9b5dba5
DATA _PADDING_8<>+128(SB)/8, $0x3956c25b3956c25b
DATA _PADDING_8<>+136(SB)/8, $0x3956c25b3956c25b
DATA _PADDING_8<>+144(SB)/8, $0x3956c25b3956c25b
DATA _PADDING_8<>+152(SB)/8, $0x3956c25b3956c25b
DATA _PADDING_8<>+160(SB)/8, $0x59f111f159f111f1
DATA _PADDING_8<>+168(SB)/8, $0x59f111f159f111f1
DATA _PADDING_8<>+176(SB)/8, $0x59f111f159f111f1
DATA _PADDING_8<>+184(SB)/8, $0x59f111f159f111f1
DATA _PADDING_8<>+192(SB)/8, $0x923f82a4923f82a4
DATA _PADDING_8<>+200(SB)/8, $0x923f82a4923f82a4
DATA _PADDING_8<>+208(SB)/8, $0x923f82a4923f82a4
DATA _PADDING_8<>+216(SB)/8, $0x923f82a4923f82a4
DATA _PADDING_8<>+224(SB)/8, $0xab1c5ed5ab1c5ed5
DATA _PADDING_8<>+232(SB)/8, $0xab1c5ed5ab1c5ed5
DATA _PADDING_8<>+240(SB)/8, $0xab1c5ed5ab1c5ed5
DATA _PADDING_8<>+248(SB)/8, $0xab1c5ed5ab1c5ed5
DATA _PADDING_8<>+256(SB)/8, $0xd807aa98d807aa98
DATA _PADDING_8<>+264(SB)/8, $0xd807aa98d807aa98
DATA _PADDING_8<>+272(SB)/8, $0xd807aa98d807aa98
DATA _PADDING_8<>+280(SB)/8, $0xd807aa98d807aa98
DATA _PADDING_8<>+288(SB)/8, $0x12835b0112835b01
DATA _PADDING_8<>+296(SB)/8, $0x12835b0112835b01
DATA _PADDING_8<>+304(SB)/8, $0x12835b0112835b01
DATA _PADDING_8<>+312(SB)/8, $0x12835b0112835b01
DATA _PADDING_8<>+320(SB)/8, $0x243185be243185be
DATA _PADDING_8<>+328(SB)/8, $0x243185be243185be
DATA _PADDING_8<>+336(SB)/8, $0x243185be243185be
DATA _PADDING_8<>+344(SB)/8, $0x243185be243185be
DATA _PADDING_8<>+352(SB)/8, $0x550c7dc3550c7dc3
DATA _PADDING_8<>+360(SB)/8, $0x550c7dc3550c7dc3
DATA _PADDING_8<>+368(SB)/8, $0x550c7dc3550c7dc3
DATA _PADDING_8<>+376(SB)/8, $0x550c7dc3550c7dc3
DATA _PADDING_8<>+384(SB)/8, $0x72be5d7472be5d74
DATA _PADDING_8<>+392(SB)/8, $0x72be5d7472be5d74
DATA _PADDING_8<>+400(SB)/8, $0x72be5d7472be5d74
DATA _PADDING_8<>+408(SB)/8, $0x72be5d7472be5d74
DATA _PADDING_8<>+416(SB)/8, $0x80deb1fe80deb1fe
DATA _PADDING_8<>+424(SB)/8, $0x80deb1fe80deb1fe
DATA _PADDING_8<>+432(SB)/8, $0x80deb1fe80deb1fe
DATA _PADDING_8<>+440(SB)/8, $0x80deb1fe80deb1fe
DATA _PADDING_8<>+448(SB)/8, $0x9bdc06a79bdc06a7
DATA _PADDING_8<>+456(SB)/8, $0x9bdc06a79bdc06a7
DATA _PADDING_8<>+464(SB)/8, $0x9bdc06a79bdc06a7
DATA _PADDING_8<>+472(SB)/8, $0x9bdc06a79bdc06a7
DATA _PADDING_8<>+480(SB)/8, $0xc19bf374c19bf374
DATA _PADDING_8<>+488(SB)/8, $0xc19bf374c19bf374
DATA _PADDING_8<>+496(SB)/8, $0xc19bf374c19bf374
DATA _PADDING_8<>+504(SB)/8, $0xc19bf374c19bf374
DATA _PADDING_8<>+512(SB)/8, $0x649b69c1649b69c1
DATA _PADDING_8<>+520(SB)/8, $0x649b69c1649b69c1
DATA _PADDING_8<>+528(SB)/8, $0x649b69c1649b69c1
DATA _PADDING_8<>+536(SB)/8, $0x649b69c1649b69c1
DATA _PADDING_8<>+544(SB)/8, $0xf0fe4786f0fe4786
DATA _PADDING_8<>+552(SB)/8, $0xf0fe4786f0fe4786
DATA _PADDING_8<>+560(SB)/8, $0xf0fe4786f0fe4786
DATA _PADDING_8<>+568(SB)/8, $0xf0fe4786f0fe4786
DATA _PADDING_8<>+576(SB)/8, $0x0fe1edc60fe1edc6
DATA _PADDING_8<>+584(SB)/8, $0x0fe1edc60fe1edc6
DATA _PADDING_8<>+592(SB)/8, $0x0fe1edc60fe1edc6
DATA _PADDING_8<>+600(SB)/8, $0x0fe1edc60fe1edc6
DATA _PADDING_8<>+608(SB)/8, $0x240cf254240cf254
DATA _PADDING_8<>+616(SB)/8, $0x240cf254240cf254
DATA _PADDING_8<>+624(SB)/8, $0x240cf254240cf254
DATA _PADDING_8<>+632(SB)/8, $0x240cf254240cf254
DATA _PADDING_8<>+640(SB)/8, $0x4fe9346f4fe9346f
DATA _PADDING_8<>+648(SB)/8, $0x4fe9346f4fe9346f
DATA _PADDING_8<>+656(SB)/8, $0x4fe9346f4fe9346f
DATA _PADDING_8<>+664(SB)/8, $0x4fe9346f4fe9346f
DATA _PADDING_8<>+672(SB)/8, $0x6cc984be6cc984be
DATA _PADDING_8<>+680(SB)/8, $0x6cc984be6cc984be
DATA _PADDING_8<>+688(SB)/8, $0x6cc984be6cc984be
DATA _PADDING_8<>+696(SB)/8, $0x6cc984be6cc984be
DATA _PADDING_8<>+704(SB)/8, $0x61b9411e61b9411e
DATA _PADDING_8<>+712(SB)/8, $0x61b9411e61b9411e
DATA _PADDING_8<>+720(SB)/8, $0x61b9411e61b9411e
DATA _PADDING_8<>+728(SB)/8, $0x61b9411e61b9411e
DATA _PADDING_8<>+736(SB)/8, $0x16f988fa16f988fa
DATA _PADDING_8<>+744(SB)/8, $0x16f988fa16f988fa
DATA _PADDING_8<>+752(SB)/8, $0x16f988fa16f988fa
DATA _PADDING_8<>+760(SB)/8, $0x16f988fa16f988fa
DATA _PADDING_8<>+768(SB)/8, $0xf2c65152f2c65152
DATA _PADDING_8<>+776(SB)/8, $0xf2c65152f2c65152
DATA _PADDING_8<>+784(SB)/8, $0xf2c65152f2c65152
DATA _PADDING_8<>+792(SB)/8, $0xf2c65152f2c65152
DATA _PADDING_8<>+800(SB)/8, $0xa88e5a6da88e5a6d
DATA _PADDING_8<>+808(SB)/8, $0xa88e5a6da88e5a6d
DATA _PADDING_8<>+816(SB)/8, $0xa88e5a6da88e5a6d
DATA _PADDING_8<>+824(SB)/8, $0xa88e5a6da88e5a6d
DATA _PADDING_8<>+832(SB)/8, $0xb019fc65b019fc65
DATA _PADDING_8<>+840(SB)/8, $0xb019fc65b019fc65
DATA _PADDING_8<>+848(SB)/8, $0xb019fc65b019fc65
DATA _PADDING_8<>+856(SB)/8, $0xb019fc65b019fc65
DATA _PADDING_8<>+864(SB)/8, $0xb9d99ec7b9d99ec7
DATA _PADDING_8<>+872(SB)/8, $0xb9d99ec7b9d99ec7
DATA _PADDING_8<>+880(SB)/8, $0xb9d99ec7b9d99ec7
DATA _PADDING_8<>+888(SB)/8, $0xb9d99ec7b9d99ec7
DATA _PADDING_8<>+896(SB)/8, $0x9a1231c39a1231c3
DATA _PADDING_8<>+904(SB)/8, $0x9a1231c39a1231c3
DATA _PADDING_8<>+912(SB)/8, $0x9a1231c39a1231c3
DATA _PADDING_8<>+920(SB)/8, $0x9a1231c39a1231c3
DATA _PADDING_8<>+928(SB)/8, $0xe70eeaa0e70eeaa0
DATA _PADDING_8<>+936(SB)/8, $0xe70eeaa0e70eeaa0
DATA _PADDING_8<>+944(SB)/8, $0xe70eeaa0e70eeaa0
DATA _PADDING_8<>+952(SB)/8, $0xe70eeaa0e70eeaa0
DATA _PADDING_8<>+960(SB)/8, $0xfdb1232bfdb1232b
DATA _PADDING_8<>+968(SB)/8, $0xfdb1232bfdb1232b
DATA _PADDING_8<>+976(SB)/8, $0xfdb1232bfdb1232b
DATA _PADDING_8<>+984(SB)/8, $0xfdb1232bfdb1232b
DATA _PADDING_8<>+992(SB)/8, $0xc7353eb0c7353eb0
DATA _PADDING_8<>+1000(SB)/8, $0xc7353eb0c7353eb0
DATA _PADDING_8<>+1008(SB)/8, $0xc7353eb0c7353eb0
DATA _PADDING_8<>+1016(SB)/8, $0xc7353eb0c7353eb0
DATA _PADDING_8<>+1024(SB)/8, $0x3069bad53069bad5
DATA _PADDING_8<>+1032(SB)/8, $0x3069bad53069bad5
DATA _PADDING_8<>+1040(SB)/8, $0x3069bad53069bad5
DATA _PADDING_8<>+1048(SB)/8, $0x3069bad53069bad5
DATA _PADDING_8<>+1056(SB)/8, $0xcb976d5fcb976d5f
DATA _PADDING_8<>+1064(SB)/8, $0xcb976d5fcb976d5f
DATA _PADDING_8<>+1072(SB)/8, $0xcb976d5fcb976d5f
DATA _PADDING_8<>+1080(SB)/8, $0xcb976d5fcb976d5f
DATA _PADDING_8<>+1088(SB)/8, $0x5a0f118f5a0f118f
DATA _PADDING_8<>+1096(SB)/8, $0x5a0f118f5a0f118f
DATA _PADDING_8<>+1104(SB)/8, $0x5a0f118f5a0f118f
DATA _PADDING_8<>+1112(SB)/8, $0x5a0f118f5a0f118f
DATA _PADDING_8<>+1120(SB)/8, $0xdc1eeefddc1eeefd
DATA _PADDING_8<>+1128(SB)/8, $0xdc1eeefddc1eeefd
DATA _PADDING_8<>+1136(SB)/8, $0xdc1eeefddc1eeefd
DATA _PADDING_8<>+1144(SB)/8, $0xdc1eeefddc1eeefd
DATA _PADDING_8<>+1152(SB)/8, $0x0a35b6890a35b689
DATA _PADDING_8<>+1160(SB)/8, $0x0a35b6890a35b689
DATA _PADDING_8<>+1168(SB)/8, $0x0a35b6890a35b689
DATA _PADDING_8<>+1176(SB)/8, $0x0a35b6890a35b689
DATA _PADDING_8<>+1184(SB)/8, $0xde0b7a04de0b7a04
DATA _PADDING_8<>+1192(SB)/8, $0xde0b7a04de0b7a04
DATA _PADDING_8<>+1200(SB)/8, $0xde0b7a04de0b7a04
DATA _PADDING_8<>+1208(SB)/8, $0xde0b7a04de0b7a04
DATA _PADDING_8<>+1216(SB)/8, $0x58f4ca9d58f4ca9d
DATA _PADDING_8<>+1224(SB)/8, $0x58f4ca9d58f4ca9d
DATA _PADDING_8<>+1232(SB)/8, $0x58f4ca9d58f4ca9d
DATA _PADDING_8<>+1240(SB)/8, $0x58f4ca9d58f4ca9d
DATA _PADDING_8<>+1248(SB)/8, $0xe15d5b16e15d5b16
DATA _PADDING_8<>+1256(SB)/8, $0xe15d5b16e15d5b16
DATA _PADDING_8<>+1264(SB)/8, $0xe15d5b16e15d5b16
DATA _PADDING_8<>+1272(SB)/8, $0xe15d5b16e15d5b16
DATA _PADDING_8<>+1280(SB)/8, $0x007f3e86007f3e86
DATA _PADDING_8<>+1288(SB)/8, $0x007f3e86007f3e86
DATA _PADDING_8<>+1296(SB)/8, $0x007f3e86007f3e86
DATA _PADDING_8<>+1304(SB)/8, $0x007f3e86007f3e86
DATA _PADDING_8<>+1312(SB)/8, $0x3708898037088980
DATA _PADDING_8<>+1320(SB)/8, $0x3708898037088980
DATA _PADDING_8<>+1328(SB)/8, $0x3708898037088980
DATA _PADDING_8<>+1336(SB)/8, $0x3708898037088980
DATA _PADDING_8<>+1344(SB)/8, $0xa507ea32a507ea32
DATA _PADDING_8<>+1352(SB)/8, $0xa507ea32a507ea32
DATA _PADDING_8<>+1360(SB)/8, $0xa507ea32a507ea32
DATA _PADDING_8<>+1368(SB)/8, $0xa507ea32a507ea32
DATA _PADDING_8<>+1376(SB)/8, $0x6fab95376fab9537
DATA _PADDING_8<>+1384(SB)/8, $0x6fab95376fab9537
DATA _PADDING_8<>+1392(SB)/8, $0x6fab95376fab9537
DATA _PADDING_8<>+1400(SB)/8, $0x6fab95376fab9537
DATA _PADDING_8<>+1408(SB)/8, $0x1740611017406110
DATA _PADDING_8<>+1416(SB)/8, $0x1740611017406110
DATA _PADDING_8<>+1424(SB)/8, $0x1740611017406110
DATA _PADDING_8<>+1432(SB)/8, $0x1740611017406110
DATA _PADDING_8<>+1440(SB)/8, $0x0d8cd6f10d8cd6f1
DATA _PADDING_8<>+1448(SB)/8, $0x0d8cd6f10d8cd6f1
DATA _PADDING_8<>+1456(SB)/8, $0x0d8cd6f10d8cd6f1
DATA _PADDING_8<>+1464(SB)/8, $0x0d8cd6f10d8cd6f1
DATA _PADDING_8<>+1472(SB)/8, $0xcdaa3b6dcdaa3b6d
DATA _PADDING_8<>+1480(SB)/8, $0xcdaa3b6dcdaa3b6d
DATA _PADDING_8<>+1488(SB)/8, $0xcdaa3b6dcdaa3b6d
DATA _PADDING_8<>+1496(SB)/8, $0xcdaa3b6dcdaa3b6d
DATA _PADDING_8<>+1504(SB)/8, $0xc0bbbe37c0bbbe37
DATA _PADDING_8<>+1512(SB)/8, $0xc0bbbe37c0bbbe37
DATA _PADDING_8<>+1520(SB)/8, $0xc0bbbe37c0bbbe37
DATA _PADDING_8<>+1528(SB)/8, $0xc0bbbe37c0bbbe37
DATA _PADDING_8<>+1536(SB)/8, $0x83613bda83613bda
DATA _PADDING_8<>+1544(SB)/8, $0x83613bda83613bda
DATA _PADDING_8<>+1552(SB)/8, $0x83613bda83613bda
DATA _PADDING_8<>+1560(SB)/8, $0x83613bda83613bda
DATA _PADDING_8<>+1568(SB)/8, $0xdb48a363db48a363
DATA _PADDING_8<>+1576(SB)/8, $0xdb48a363db48a363
DATA _PADDING_8<>+1584(SB)/8, $0xdb48a363db48a363
DATA _PADDING_8<>+1592(SB)/8, $0xdb48a363db48a363
DATA _PADDING_8<>+1600(SB)/8, $0x0b02e9310b02e931
DATA _PADDING_8<>+1608(SB)/8, $0x0b02e9310b02e931
DATA _PADDING_8<>+1616(SB)/8, $0x0b02e9310b02e931
DATA _PADDING_8<>+1624(SB)/8, $0x0b02e9310b02e931
DATA _PADDING_8<>+1632(SB)/8, $0x6fd15ca76fd15ca7
DATA _PADDING_8<>+1640(SB)/8, $0x6fd15ca76fd15ca7
DATA _PADDING_8<>+1648(SB)/8, $0x6fd15ca76fd15ca7
DATA _PADDING_8<>+1656(SB)/8, $0x6fd15ca76fd15ca7
DATA _PADDING_8<>+1664(SB)/8, $0x521afaca521afaca
DATA _PADDING_8<>+1672(SB)/8, $0x521afaca521afaca
DATA _PADDING_8<>+1680(SB)/8, $0x521afaca521afaca
DATA _PADDING_8<>+1688(SB)/8, $0x521afaca521afaca
DATA _PADDING_8<>+1696(SB)/8, $0x3133843131338431
DATA _PADDING_8<>+1704(SB)/8, $0x3133843131338431
DATA _PADDING_8<>+1712(SB)/8, $0x3133843131338431
DATA _PADDING_8<>+1720(SB)/8, $0x3133843131338431
DATA _PADDING_8<>+1728(SB)/8, $0x6ed41a956ed41a95
DATA _PADDING_8<>+1736(SB)/8, $0x6ed41a956ed41a95
DATA _PADDING_8<>+1744(SB)/8, $0x6ed41a956ed41a95
DATA _PADDING_8<>+1752(SB)/8, $0x6ed41a956ed41a95
DATA _PADDING_8<>+1760(SB)/8, $0x6d4378906d437890
DATA _PADDING_8<>+1768(SB)/8, $0x6d4378906d437890
DATA _PADDING_8<>+1776(SB)/8, $0x6d4378906d437890
DATA _PADDING_8<>+1784(SB)/8, $0x6d4378906d437890
DATA _PADDING_8<>+1792(SB)/8, $0xc39c91f2c39c91f2
DATA _PADDING_8<>+1800(SB)/8, $0xc39c91f2c39c91f2
DATA _PADDING_8<>+1808(SB)/8, $0xc39c91f2c39c91f2
DATA _PADDING_8<>+1816(SB)/8, $0xc39c91f2c39c91f2
DATA _PADDING_8<>+1824(SB)/8, $0x9eccabbd9eccabbd
DATA _PADDING_8<>+1832(SB)/8, $0x9eccabbd9eccabbd
DATA _PADDING_8<>+1840(SB)/8, $0x9eccabbd9eccabbd
DATA _PADDING_8<>+1848(SB)/8, $0x9eccabbd9eccabbd
DATA _PADDING_8<>+1856(SB)/8, $0xb5c9a0e6b5c9a0e6
DATA _PADDING_8<>+1864(SB)/8, $0xb5c9a0e6b5c9a0e6
DATA _PADDING_8<>+1872(SB)/8, $0xb5c9a0e6b5c9a0e6
DATA _PADDING_8<>+1880(SB)/8, $0xb5c9a0e6b5c9a0e6
DATA _PADDING_8<>+1888(SB)/8, $0x532fb63c532fb63c
DATA _PADDING_8<>+1896(SB)/8, $0x532fb63c532fb63c
DATA _PADDING_8<>+1904(SB)/8, $0x532fb63c532fb63c
DATA _PADDING_8<>+1912(SB)/8, $0x532fb63c532fb63c
DATA _PADDING_8<>+1920(SB)/8, $0xd2c741c6d2c741c6
DATA _PADDING_8<>+1928(SB)/8, $0xd2c741c6d2c741c6
DATA _PADDING_8<>+1936(SB)/8, $0xd2c741c6d2c741c6
DATA _PADDING_8<>+1944(SB)/8, $0xd2c741c6d2c741c6
DATA _PADDING_8<>+1952(SB)/8, $0x07237ea307237ea3
DATA _PADDING_8<>+1960(SB)/8, $0x07237ea307237ea3
DATA _PADDING_8<>+1968(SB)/8, $0x07237ea307237ea3
DATA _PADDING_8<>+1976(SB)/8, $0x07237ea307237ea3
DATA _PADDING_8<>+1984(SB)/8, $0xa4954b68a4954b68
DATA _PADDING_8<>+1992(SB)/8, $0xa4954b68a4954b68
DATA _PADDING_8<>+2000(SB)/8, $0xa4954b68a4954b68
DATA _PADDING_8<>+2008(SB)/8, $0xa4954b68a4954b68
DATA _PADDING_8<>+2016(SB)/8, $0x4c191d764c191d76
DATA _PADDING_8<>+2024(SB)/8, $0x4c191d764c191d76
DATA _PADDING_8<>+2032(SB)/8, $0x4c191d764c191d76
DATA _PADDING_8<>+2040(SB)/8, $0x4c191d764c191d76
GLOBL _PADDING_8<>(SB),(NOPTR+RODATA),$2048

DATA _DIGEST_8<>+0(SB)/4, $0x6a09e667
DATA _DIGEST_8<>+4(SB)/4, $0x6a09e667
DATA _DIGEST_8<>+8(SB)/4, $0x6a09e667
DATA _DIGEST_8<>+12(SB)/4, $0x6a09e667
DATA _DIGEST_8<>+16(SB)/4, $0x6a09e667
DATA _DIGEST_8<>+20(SB)/4, $0x6a09e667
DATA _DIGEST_8<>+24(SB)/4, $0x6a09e667
DATA _DIGEST_8<>+28(SB)/4, $0x6a09e667
DATA _DIGEST_8<>+32(SB)/4, $0xbb67ae85
DATA _DIGEST_8<>+36(SB)/4, $0xbb67ae85
DATA _DIGEST_8<>+40(SB)/4, $0xbb67ae85
DATA _DIGEST_8<>+44(SB)/4, $0xbb67ae85 
DATA _DIGEST_8<>+48(SB)/4, $0xbb67ae85
DATA _DIGEST_8<>+52(SB)/4, $0xbb67ae85
DATA _DIGEST_8<>+56(SB)/4, $0xbb67ae85
DATA _DIGEST_8<>+60(SB)/4, $0xbb67ae85 
DATA _DIGEST_8<>+64(SB)/4, $0x3c6ef372
DATA _DIGEST_8<>+68(SB)/4, $0x3c6ef372
DATA _DIGEST_8<>+72(SB)/4, $0x3c6ef372
DATA _DIGEST_8<>+76(SB)/4, $0x3c6ef372 
DATA _DIGEST_8<>+80(SB)/4, $0x3c6ef372
DATA _DIGEST_8<>+84(SB)/4, $0x3c6ef372
DATA _DIGEST_8<>+88(SB)/4, $0x3c6ef372
DATA _DIGEST_8<>+92(SB)/4, $0x3c6ef372 
DATA _DIGEST_8<>+96(SB)/4, $0xa54ff53a
DATA _DIGEST_8<>+100(SB)/4, $0xa54ff53a
DATA _DIGEST_8<>+104(SB)/4, $0xa54ff53a
DATA _DIGEST_8<>+108(SB)/4, $0xa54ff53a 
DATA _DIGEST_8<>+112(SB)/4, $0xa54ff53a
DATA _DIGEST_8<>+116(SB)/4, $0xa54ff53a
DATA _DIGEST_8<>+120(SB)/4, $0xa54ff53a
DATA _DIGEST_8<>+124(SB)/4, $0xa54ff53a 
DATA _DIGEST_8<>+128(SB)/4, $0x510e527f
DATA _DIGEST_8<>+132(SB)/4, $0x510e527f
DATA _DIGEST_8<>+136(SB)/4, $0x510e527f
DATA _DIGEST_8<>+140(SB)/4, $0x510e527f
DATA _DIGEST_8<>+144(SB)/4, $0x510e527f
DATA _DIGEST_8<>+148(SB)/4, $0x510e527f
DATA _DIGEST_8<>+152(SB)/4, $0x510e527f
DATA _DIGEST_8<>+156(SB)/4, $0x510e527f
DATA _DIGEST_8<>+160(SB)/4, $0x9b05688c
DATA _DIGEST_8<>+164(SB)/4, $0x9b05688c
DATA _DIGEST_8<>+168(SB)/4, $0x9b05688c
DATA _DIGEST_8<>+172(SB)/4, $0x9b05688c 
DATA _DIGEST_8<>+176(SB)/4, $0x9b05688c
DATA _DIGEST_8<>+180(SB)/4, $0x9b05688c
DATA _DIGEST_8<>+184(SB)/4, $0x9b05688c
DATA _DIGEST_8<>+188(SB)/4, $0x9b05688c 
DATA _DIGEST_8<>+192(SB)/4, $0x1f83d9ab
DATA _DIGEST_8<>+196(SB)/4, $0x1f83d9ab
DATA _DIGEST_8<>+200(SB)/4, $0x1f83d9ab
DATA _DIGEST_8<>+204(SB)/4, $0x1f83d9ab
DATA _DIGEST_8<>+208(SB)/4, $0x1f83d9ab
DATA _DIGEST_8<>+212(SB)/4, $0x1f83d9ab
DATA _DIGEST_8<>+216(SB)/4, $0x1f83d9ab
DATA _DIGEST_8<>+220(SB)/4, $0x1f83d9ab
DATA _DIGEST_8<>+224(SB)/4, $0x5be0cd19
DATA _DIGEST_8<>+228(SB)/4, $0x5be0cd19
DATA _DIGEST_8<>+232(SB)/4, $0x5be0cd19
DATA _DIGEST_8<>+236(SB)/4, $0x5be0cd19
DATA _DIGEST_8<>+240(SB)/4, $0x5be0cd19
DATA _DIGEST_8<>+244(SB)/4, $0x5be0cd19
DATA _DIGEST_8<>+248(SB)/4, $0x5be0cd19
DATA _DIGEST_8<>+252(SB)/4, $0x5be0cd19
GLOBL _DIGEST_8<>(SB),(NOPTR+RODATA),$256

DATA _PSHUFFLE_BYTE_FLIP_MASK_8<>+0(SB)/8, $0x0405060700010203
DATA _PSHUFFLE_BYTE_FLIP_MASK_8<>+8(SB)/8, $0x0c0d0e0f08090a0b
DATA _PSHUFFLE_BYTE_FLIP_MASK_8<>+16(SB)/8, $0x0405060700010203
DATA _PSHUFFLE_BYTE_FLIP_MASK_8<>+24(SB)/8, $0x0c0d0e0f08090a0b
GLOBL _PSHUFFLE_BYTE_FLIP_MASK_8<>(SB),(NOPTR+RODATA),$32


